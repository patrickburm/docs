{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"The most efficient platform for the token economy \u00b6 The blockchain industry and the infrastructure of the Internet of Value are being built rapidly around the globe, and to many the atmosphere is eerily similar to the building of the Internet in the late \u201990s, with pioneers and dreamers coming together to build a new future. The objective of TomoChain is to become a leading part of this phenomenon through seamlessly merging an ecosystem of applications with cryptographic tokens used by millions of mainstream users with a unique blockchain infrastructure architecture, allowing for fast, frictionless payment and a secure, decentralised, and trusted store of value. TomoChain aims to be a public EVM-compatible blockchain with the following advantages: low transaction fee, fast confirmation time, double validation and randomization for security guarantees. TomoChain envisions an ecosystem of different DApps running on the TomoChain blockchain infrastructure. In particular, we propose a solution for solving the transaction processing performance bottleneck in Ethereum which hinders its adoption into industries, especially finance. More specifically, we are constructing an efficient and secured consensus protocol, which tackles the following main bottlenecks of classic blockchains: Efficiency: The small throughput of Bitcoin and Ethereum severely hinders a widespread adoption of such crypto- currencies. Confirmation times: Bitcoin takes on average 1 hour to confirm a transaction because the confirmation of a Bitcoin block requires 5 subsequent blocks created following it. While Ethereum uses a smaller block-time, the average confirmation time still remains relatively high, around 13 minutes. These long confirmation times hinder many important applications (especially smart contract applications). Fork Generation: The problem of fork chain consumes computational energy, time, and creates potential vulnerabilities for different types of attacks. In the newly published technical paper, TomoChain proposes the Proof-of-Stake Voting (PoSV) consensus, which is a PoS-based blockchain protocol with a fair voting mechanism, rigorous security guarantees, and uniform probability eventually. The consensus has the following key novelties: Double Validation to strengthen security and reduce fork Randomization to guarantee the fair and prevent handshaking attack Fast confirmation time and efficient checkpoints for finality or rebase","title":"Introduction"},{"location":"#the-most-efficient-platform-for-the-token-economy","text":"The blockchain industry and the infrastructure of the Internet of Value are being built rapidly around the globe, and to many the atmosphere is eerily similar to the building of the Internet in the late \u201990s, with pioneers and dreamers coming together to build a new future. The objective of TomoChain is to become a leading part of this phenomenon through seamlessly merging an ecosystem of applications with cryptographic tokens used by millions of mainstream users with a unique blockchain infrastructure architecture, allowing for fast, frictionless payment and a secure, decentralised, and trusted store of value. TomoChain aims to be a public EVM-compatible blockchain with the following advantages: low transaction fee, fast confirmation time, double validation and randomization for security guarantees. TomoChain envisions an ecosystem of different DApps running on the TomoChain blockchain infrastructure. In particular, we propose a solution for solving the transaction processing performance bottleneck in Ethereum which hinders its adoption into industries, especially finance. More specifically, we are constructing an efficient and secured consensus protocol, which tackles the following main bottlenecks of classic blockchains: Efficiency: The small throughput of Bitcoin and Ethereum severely hinders a widespread adoption of such crypto- currencies. Confirmation times: Bitcoin takes on average 1 hour to confirm a transaction because the confirmation of a Bitcoin block requires 5 subsequent blocks created following it. While Ethereum uses a smaller block-time, the average confirmation time still remains relatively high, around 13 minutes. These long confirmation times hinder many important applications (especially smart contract applications). Fork Generation: The problem of fork chain consumes computational energy, time, and creates potential vulnerabilities for different types of attacks. In the newly published technical paper, TomoChain proposes the Proof-of-Stake Voting (PoSV) consensus, which is a PoS-based blockchain protocol with a fair voting mechanism, rigorous security guarantees, and uniform probability eventually. The consensus has the following key novelties: Double Validation to strengthen security and reduce fork Randomization to guarantee the fair and prevent handshaking attack Fast confirmation time and efficient checkpoints for finality or rebase","title":"The most efficient platform for the token economy"},{"location":"general/about/","text":"Headquarters \u00b6 TomoChain Pte. Ltd. 10 Anson Road #22-15 International Plaza Singapore 079903","title":"About"},{"location":"general/about/#headquarters","text":"TomoChain Pte. Ltd. 10 Anson Road #22-15 International Plaza Singapore 079903","title":"Headquarters"},{"location":"general/changelog/","text":"Changelog \u00b6 This page contains all the major new features about the Tomochain software. You can follow the progress of the project here chronologically. 08-10-2018 \u00b6 TomoWallet (mobile) \u00b6 TomoWallet is now available on the App Store and Play Store . 01-10-2018 \u00b6 TomoScan v0.2 \u00b6 Added anchors for tabs. Code of the crawler revised. New users will receive a welcome email. You can now add an address to the list of followed addresses. 28-09-2018 \u00b6 tmn v0.2 \u00b6 Add a update command to use the latest TomoChain client. Logic has been refactored for better extensibility. Your logs will now never exceed 3GB thanks to the log rotation. Minor aesthetics changes. 26-09-2018 \u00b6 TomoWallet v0.1 \u00b6 Create and import a wallet. Transfer and receive TOMO for Testnet use only. Earn TOMO for Testnet use only with an integrated faucet. 20-09-2018 \u00b6 TomoScan v0.1 \u00b6 Crawl data from a full node. Serve a modern webapp frontend. 10-09-2018 \u00b6 tmn v0.1 \u00b6 Start a full node. Stop a full node. Inspect the full node. Get the full node status. Remove a full node. TomoChain v0.2 \u00b6 Enhance masternode set selection on each epoch Introduce single TOML file to run full-node to get rid of long-typing multiple flags Stabilize block importing between nodes 06-09-2018 \u00b6 TomoMaster v0.2 \u00b6 Desktop version released. Optimize withdrawals page. Voters can now search for a candidate. Several bug fixes. 21-08-2018 \u00b6 TomoMaster v0.1 \u00b6 Vote for masternodes with TOMO. Unvote and withdraw. Calculate rewards for voters and masternodes. List masternodes and candidates Monitor masternodes' performance TomoChain v0.1 \u00b6 PoSV consensus (Proof of Stake Voting) Block producers (masternode) Reward engine and staking mechanism Integrate with TomoScan and TomoMaster Built-in smart contracts for voting and reward","title":"Changelog"},{"location":"general/changelog/#changelog","text":"This page contains all the major new features about the Tomochain software. You can follow the progress of the project here chronologically.","title":"Changelog"},{"location":"general/changelog/#08-10-2018","text":"","title":"08-10-2018"},{"location":"general/changelog/#tomowallet-mobile","text":"TomoWallet is now available on the App Store and Play Store .","title":"TomoWallet (mobile)"},{"location":"general/changelog/#01-10-2018","text":"","title":"01-10-2018"},{"location":"general/changelog/#tomoscan-v02","text":"Added anchors for tabs. Code of the crawler revised. New users will receive a welcome email. You can now add an address to the list of followed addresses.","title":"TomoScan v0.2"},{"location":"general/changelog/#28-09-2018","text":"","title":"28-09-2018"},{"location":"general/changelog/#tmn-v02","text":"Add a update command to use the latest TomoChain client. Logic has been refactored for better extensibility. Your logs will now never exceed 3GB thanks to the log rotation. Minor aesthetics changes.","title":"tmn v0.2"},{"location":"general/changelog/#26-09-2018","text":"","title":"26-09-2018"},{"location":"general/changelog/#tomowallet-v01","text":"Create and import a wallet. Transfer and receive TOMO for Testnet use only. Earn TOMO for Testnet use only with an integrated faucet.","title":"TomoWallet v0.1"},{"location":"general/changelog/#20-09-2018","text":"","title":"20-09-2018"},{"location":"general/changelog/#tomoscan-v01","text":"Crawl data from a full node. Serve a modern webapp frontend.","title":"TomoScan v0.1"},{"location":"general/changelog/#10-09-2018","text":"","title":"10-09-2018"},{"location":"general/changelog/#tmn-v01","text":"Start a full node. Stop a full node. Inspect the full node. Get the full node status. Remove a full node.","title":"tmn v0.1"},{"location":"general/changelog/#tomochain-v02","text":"Enhance masternode set selection on each epoch Introduce single TOML file to run full-node to get rid of long-typing multiple flags Stabilize block importing between nodes","title":"TomoChain v0.2"},{"location":"general/changelog/#06-09-2018","text":"","title":"06-09-2018"},{"location":"general/changelog/#tomomaster-v02","text":"Desktop version released. Optimize withdrawals page. Voters can now search for a candidate. Several bug fixes.","title":"TomoMaster v0.2"},{"location":"general/changelog/#21-08-2018","text":"","title":"21-08-2018"},{"location":"general/changelog/#tomomaster-v01","text":"Vote for masternodes with TOMO. Unvote and withdraw. Calculate rewards for voters and masternodes. List masternodes and candidates Monitor masternodes' performance","title":"TomoMaster v0.1"},{"location":"general/changelog/#tomochain-v01","text":"PoSV consensus (Proof of Stake Voting) Block producers (masternode) Reward engine and staking mechanism Integrate with TomoScan and TomoMaster Built-in smart contracts for voting and reward","title":"TomoChain v0.1"},{"location":"general/faq/","text":"Frequently asked questions \u00b6 TOMO \u00b6 What are TOMO? How can I earn them? TOMO is the native cryptocurrency of TomoChain and will be the reserve cryptocurrency for all third-party apps running on TomoChain. Being the protocol token for the TomoChain infrastructure, TOMO will be needed by all parties utilising TomoChain to build apps or issue and integrate cryptographic tokens into their apps. The supply of TOMO is fixed, long-term and non-inflationary. In addition to the above, TOMO is an integral part of the TomoChain network for a number of reasons. TOMO will be used to fund the development of TomoChain and it's ecosystem (TomoScan, TomoMater, TomoWallet, etc.). TOMO will be used as a reward to incentivise the building of the TomoChain engine/ecosystem. TOMO will be used as a long-term, decentralized governance instrument of the TomoChain network. You can check our technical whitepaper for more details. You can trade TOMO on various exchanges. Take a look in the \"Exchanges\" section on this page of our main website . How are TOMO distributed? The token allocation is splitted as follow: - 55 millions TOMO was alrealy allocated after the token sale period; - 12 millions TOMO are reserved for the team vested over the next 4 years; - 16 millions TOMO are reserved for strategic partners and an ecosystem building fund; - 17 millions TOMO are reserved as block rewards for the next 8 years Can I mine TOMO? TOMO is a non-mineable cryptocurrency. What is TOMO's total supply and circulating supply? TOMO total token supply is fixed at 100,000,000 TOMO. The current circulating supply is 55,000,000 TOMO. How can I send TOMO to my wallet? You can store TOMO in wallet supporting ERC20 Standard. We recommend to store TOMO in MYETHERWALLET + TREZOR/LEDGER NANO S + METAMASK + Mist + Parity + Trust. TomoCoin Token Address: 0x8b353021189375591723e7384262f45709a3c3dc Token Symbol: TOMO Decimals: 18 When will you list on the next exchange? We do not discuss about exchange related questions due to the regulation. We will announce every exchange news on our official canals on due time. Is TOMO a token? Yes, TOMO is actually an ERC20 token on the Ethereum blockchain. It will be swapped to an independent token on our Mainnet release. How will it be swapped? We will lock your ERC20 tokens at an announced date before swapping them on our Mainnet to ensure consistency. Whilst tokens are locked, they are not transferable to another address. What is the price in presale and ICO? Presale Price: $0.2 ICO Price: $0.25 ( 0.0003125 ETH ) Ecosystem \u00b6 TomoChain \u00b6 What is Tomochain? How does it work? TomoChain is an innovative solution to the scalability problem of the Ethereum blockchain, and other current blockchain platforms. TomoChain relies on a system of 150 Masternodes with Proof of Stake Voting (POSV) consensus that can support near-zero fees and 2-second transaction confirmation times. Security, stability and chain finality are guaranteed via novel techniques such as double validation, staking via smart-contracts and true randomization processes. TomoChain supports all EVM-compatible smart-contracts, protocols, and atomic cross-chain token transfers. New scaling techniques such as sharding, EVM parallelisation, private-chain generation, hardware integration will be continuously researched and incorporated into TomoChain's Masternode architecture. It will be an ideal scalable smart-contract public blockchain for decentralized apps, token issuances and token integrations for small and big businesses. Is TomoChain a side chain of Ethereum? No. TomoChain will have its own blockchain when our Mainnet is launched in Q4 2018. What is the difference between TOMO and TomoChain? TOMO is the native currency of the TomoChain ecosystem. Blockchain \u00b6 Is there a way to see the raw data stored in the TomoChain blockchain? Yes. You can use our block explorer, TomoScan . It's pretty similar to etherscan if you are already familliar with it. Where can I check the actual products/ecosystem? For now, you can consult the Testnet as our Mainnet will launch in Q4 2018. Please read the complete Testnet announcement on our Medium post . If you want to access it directly, you can find the links to our different products deployed in Testnet on our Netwoks page. What is a masternode in the TomoChain ecosystem? A TomoChain masternode is a server who will use its computing power to contribute to the network. Its job is to create and sign blocks. Masternodes are elected using the PoSV consensus via our governance dApp TomoMaster What is required to become a TomoChain masternode? You need to deposit 50'000 TOMO to become a masternode candidate. Candidates become masternodes if they belong to the top 150 most voted candidates. What are the incentives to become a candidate or masternode? Masternodes will receive a significant amount of block rewards, which will likely exceeds the cost for running the infrastructure. However, masternode owners need to invest in TomoChain by depositing at least 50'000 TOMO, and stake them in the long term. After the initial deposite, if the account does not become a masternode (has less votes than the top 150 most voted candidates), he will not receive rewards. Therefore, candidates are incentivised to do as much as they can to signal their capability to support TomoChain to get into top 150 most voted candidates. What are the voters incentives? Do voters get rewards too? Token voters should vote for the candidates who demonstrate strong support to the TomoChain ecosystem. If strong candidates are voted to become masternodes, the network will be more powerfull and the voters will earn more rewards. More informations on the voting and reward mechanism in the economical whitepaper . Company \u00b6 Where is your company registered? You can check our informations on the Singaporean registry . You can also but the ACRA copy if you need more details How many people are in the TomoChain team? We are around twenty-five people working fulltime. We constantly adapt our hiring process depending on the new projects we get. Check us out on our main website ! Where can I take a look at the code? All the code regarding TomoChain is free to consult on our GitHub . This includes the code for the TomoChain blockchain client, governance DApp, block explorer, tools, docker images, documentation, etc. However, other blockchain related projects like ReplyBlock or drafts, work in progress and not yet disclosed projects are usually kept in private repositories. We like to publish code publicly when it reaches a certain level of development and/or when we think auditing and contributions are beneficial to the codebase. Keeping early projects private is probably more responsible for now due to our scale. It might change in the future. We are also working with some third parties with which we signed a non-disclosure-agreements for code development. Where can I contact you to get support? If you need support, please contact us on one of this platform. Technical talk and support running our softwares: Gitter (https://gitter.im/tomochain) Bugs or technical contributions: GitHub (https://github.com/tomochain) General quotes regarding our blockchain: Telegram (https://t.me/tomochain) You can keep in touch with our latest news here: Twitter: https://twitter.com/TomoChainANN Telegram Announcements: https://t.me/TomoChainChannel Facebook: https://www.facebook.com/tomochainofficial Website: https://tomochain.com Medium: https://medium.com/tomochain Reddit: https://www.reddit.com/r/Tomochain/ LinkedIn: https://www.linkedin.com/company/tomochain/","title":"FAQ"},{"location":"general/faq/#frequently-asked-questions","text":"","title":"Frequently asked questions"},{"location":"general/faq/#tomo","text":"What are TOMO? How can I earn them? TOMO is the native cryptocurrency of TomoChain and will be the reserve cryptocurrency for all third-party apps running on TomoChain. Being the protocol token for the TomoChain infrastructure, TOMO will be needed by all parties utilising TomoChain to build apps or issue and integrate cryptographic tokens into their apps. The supply of TOMO is fixed, long-term and non-inflationary. In addition to the above, TOMO is an integral part of the TomoChain network for a number of reasons. TOMO will be used to fund the development of TomoChain and it's ecosystem (TomoScan, TomoMater, TomoWallet, etc.). TOMO will be used as a reward to incentivise the building of the TomoChain engine/ecosystem. TOMO will be used as a long-term, decentralized governance instrument of the TomoChain network. You can check our technical whitepaper for more details. You can trade TOMO on various exchanges. Take a look in the \"Exchanges\" section on this page of our main website . How are TOMO distributed? The token allocation is splitted as follow: - 55 millions TOMO was alrealy allocated after the token sale period; - 12 millions TOMO are reserved for the team vested over the next 4 years; - 16 millions TOMO are reserved for strategic partners and an ecosystem building fund; - 17 millions TOMO are reserved as block rewards for the next 8 years Can I mine TOMO? TOMO is a non-mineable cryptocurrency. What is TOMO's total supply and circulating supply? TOMO total token supply is fixed at 100,000,000 TOMO. The current circulating supply is 55,000,000 TOMO. How can I send TOMO to my wallet? You can store TOMO in wallet supporting ERC20 Standard. We recommend to store TOMO in MYETHERWALLET + TREZOR/LEDGER NANO S + METAMASK + Mist + Parity + Trust. TomoCoin Token Address: 0x8b353021189375591723e7384262f45709a3c3dc Token Symbol: TOMO Decimals: 18 When will you list on the next exchange? We do not discuss about exchange related questions due to the regulation. We will announce every exchange news on our official canals on due time. Is TOMO a token? Yes, TOMO is actually an ERC20 token on the Ethereum blockchain. It will be swapped to an independent token on our Mainnet release. How will it be swapped? We will lock your ERC20 tokens at an announced date before swapping them on our Mainnet to ensure consistency. Whilst tokens are locked, they are not transferable to another address. What is the price in presale and ICO? Presale Price: $0.2 ICO Price: $0.25 ( 0.0003125 ETH )","title":"TOMO"},{"location":"general/faq/#ecosystem","text":"","title":"Ecosystem"},{"location":"general/faq/#tomochain","text":"What is Tomochain? How does it work? TomoChain is an innovative solution to the scalability problem of the Ethereum blockchain, and other current blockchain platforms. TomoChain relies on a system of 150 Masternodes with Proof of Stake Voting (POSV) consensus that can support near-zero fees and 2-second transaction confirmation times. Security, stability and chain finality are guaranteed via novel techniques such as double validation, staking via smart-contracts and true randomization processes. TomoChain supports all EVM-compatible smart-contracts, protocols, and atomic cross-chain token transfers. New scaling techniques such as sharding, EVM parallelisation, private-chain generation, hardware integration will be continuously researched and incorporated into TomoChain's Masternode architecture. It will be an ideal scalable smart-contract public blockchain for decentralized apps, token issuances and token integrations for small and big businesses. Is TomoChain a side chain of Ethereum? No. TomoChain will have its own blockchain when our Mainnet is launched in Q4 2018. What is the difference between TOMO and TomoChain? TOMO is the native currency of the TomoChain ecosystem.","title":"TomoChain"},{"location":"general/faq/#blockchain","text":"Is there a way to see the raw data stored in the TomoChain blockchain? Yes. You can use our block explorer, TomoScan . It's pretty similar to etherscan if you are already familliar with it. Where can I check the actual products/ecosystem? For now, you can consult the Testnet as our Mainnet will launch in Q4 2018. Please read the complete Testnet announcement on our Medium post . If you want to access it directly, you can find the links to our different products deployed in Testnet on our Netwoks page. What is a masternode in the TomoChain ecosystem? A TomoChain masternode is a server who will use its computing power to contribute to the network. Its job is to create and sign blocks. Masternodes are elected using the PoSV consensus via our governance dApp TomoMaster What is required to become a TomoChain masternode? You need to deposit 50'000 TOMO to become a masternode candidate. Candidates become masternodes if they belong to the top 150 most voted candidates. What are the incentives to become a candidate or masternode? Masternodes will receive a significant amount of block rewards, which will likely exceeds the cost for running the infrastructure. However, masternode owners need to invest in TomoChain by depositing at least 50'000 TOMO, and stake them in the long term. After the initial deposite, if the account does not become a masternode (has less votes than the top 150 most voted candidates), he will not receive rewards. Therefore, candidates are incentivised to do as much as they can to signal their capability to support TomoChain to get into top 150 most voted candidates. What are the voters incentives? Do voters get rewards too? Token voters should vote for the candidates who demonstrate strong support to the TomoChain ecosystem. If strong candidates are voted to become masternodes, the network will be more powerfull and the voters will earn more rewards. More informations on the voting and reward mechanism in the economical whitepaper .","title":"Blockchain"},{"location":"general/faq/#company","text":"Where is your company registered? You can check our informations on the Singaporean registry . You can also but the ACRA copy if you need more details How many people are in the TomoChain team? We are around twenty-five people working fulltime. We constantly adapt our hiring process depending on the new projects we get. Check us out on our main website ! Where can I take a look at the code? All the code regarding TomoChain is free to consult on our GitHub . This includes the code for the TomoChain blockchain client, governance DApp, block explorer, tools, docker images, documentation, etc. However, other blockchain related projects like ReplyBlock or drafts, work in progress and not yet disclosed projects are usually kept in private repositories. We like to publish code publicly when it reaches a certain level of development and/or when we think auditing and contributions are beneficial to the codebase. Keeping early projects private is probably more responsible for now due to our scale. It might change in the future. We are also working with some third parties with which we signed a non-disclosure-agreements for code development. Where can I contact you to get support? If you need support, please contact us on one of this platform. Technical talk and support running our softwares: Gitter (https://gitter.im/tomochain) Bugs or technical contributions: GitHub (https://github.com/tomochain) General quotes regarding our blockchain: Telegram (https://t.me/tomochain) You can keep in touch with our latest news here: Twitter: https://twitter.com/TomoChainANN Telegram Announcements: https://t.me/TomoChainChannel Facebook: https://www.facebook.com/tomochainofficial Website: https://tomochain.com Medium: https://medium.com/tomochain Reddit: https://www.reddit.com/r/Tomochain/ LinkedIn: https://www.linkedin.com/company/tomochain/","title":"Company"},{"location":"general/important-links/","text":"Links \u00b6 Main website Technical Whitepaper Github Testnet \u00b6 Status page Block explorer (TomoScan) Governance dApp (TomoMaster) Wallet dApp (TomoWallet) Faucet (receive free testnet TOMO)","title":"Important links"},{"location":"general/important-links/#links","text":"Main website Technical Whitepaper Github","title":"Links"},{"location":"general/important-links/#testnet","text":"Status page Block explorer (TomoScan) Governance dApp (TomoMaster) Wallet dApp (TomoWallet) Faucet (receive free testnet TOMO)","title":"Testnet"},{"location":"general/networks/","text":"Mainnet \u00b6 TomoChain, a independent public blockchain, the most efficient platform for the token economy Specifications \u00b6 Chain id: 88 RPC endpoint: https://mainnet.tomochain.com Websocket endpoint: wss://ws.mainnet.tomochain.com HD derivation path: m/44'/889'/0'/0/ Consensus: POSV Block finality: >75% Consensus nodes: up to 150 (masternodes) Genesis block date: December 14th, 2018 Testnet \u00b6 The Testnet network is meant to be a public demo of our products and a way for us to test new features. Specifications \u00b6 Chain id: 89 RPC endpoint: https://testnet.tomochain.com Websocket endpoint: wss://testnet.tomochain.com/ws HD derivation path: m/44'/889'/0'/0/ Consensus: POSV Block finality: >75% Consensus nodes: up to 150 (masternodes) Usefull links \u00b6 Status page Block explorer (TomoScan) Governance dApp (TomoMaster) Wallet dApp (TomoWallet) Faucet (receive free testnet TOMO) For developers \u00b6 Testnet is the best way to test your smart contracts. Configure your deployment tool (truffle for example) to connect to the testnet and deploy your new code without having to worry about fees. For investors and enthusiasts \u00b6 You will find on the Testnet the exact same ecosystem as on the actual Mainnet. You can try all the features we propose like voting, running a masternode, discovering our dApps, etc.","title":"Networks"},{"location":"general/networks/#mainnet","text":"TomoChain, a independent public blockchain, the most efficient platform for the token economy","title":"Mainnet"},{"location":"general/networks/#specifications","text":"Chain id: 88 RPC endpoint: https://mainnet.tomochain.com Websocket endpoint: wss://ws.mainnet.tomochain.com HD derivation path: m/44'/889'/0'/0/ Consensus: POSV Block finality: >75% Consensus nodes: up to 150 (masternodes) Genesis block date: December 14th, 2018","title":"Specifications"},{"location":"general/networks/#testnet","text":"The Testnet network is meant to be a public demo of our products and a way for us to test new features.","title":"Testnet"},{"location":"general/networks/#specifications_1","text":"Chain id: 89 RPC endpoint: https://testnet.tomochain.com Websocket endpoint: wss://testnet.tomochain.com/ws HD derivation path: m/44'/889'/0'/0/ Consensus: POSV Block finality: >75% Consensus nodes: up to 150 (masternodes)","title":"Specifications"},{"location":"general/networks/#usefull-links","text":"Status page Block explorer (TomoScan) Governance dApp (TomoMaster) Wallet dApp (TomoWallet) Faucet (receive free testnet TOMO)","title":"Usefull links"},{"location":"general/networks/#for-developers","text":"Testnet is the best way to test your smart contracts. Configure your deployment tool (truffle for example) to connect to the testnet and deploy your new code without having to worry about fees.","title":"For developers"},{"location":"general/networks/#for-investors-and-enthusiasts","text":"You will find on the Testnet the exact same ecosystem as on the actual Mainnet. You can try all the features we propose like voting, running a masternode, discovering our dApps, etc.","title":"For investors and enthusiasts"},{"location":"general/use-cases/","text":"Use Cases \u00b6 Partners willing to run applications on top of Tomochain: Social Network: replyblock.com E-commerce: binkabi.io Advertising Ecosystem: bigbom.com Robotics Ecosystem: kambria.io Open Banking: orcaalliance.eu Food Traceability: te-food.com Pharmaceutical Tracking: farmatrust.com Travel Network: triip.me Decentralized Domain Name: portal.network You can consult a more detailed list of dApps on the main Tomochain website .","title":"Use cases"},{"location":"general/use-cases/#use-cases","text":"Partners willing to run applications on top of Tomochain: Social Network: replyblock.com E-commerce: binkabi.io Advertising Ecosystem: bigbom.com Robotics Ecosystem: kambria.io Open Banking: orcaalliance.eu Food Traceability: te-food.com Pharmaceutical Tracking: farmatrust.com Travel Network: triip.me Decentralized Domain Name: portal.network You can consult a more detailed list of dApps on the main Tomochain website .","title":"Use Cases"},{"location":"get-started/apply-node/","text":"Once your full node is up and running, you need to apply it to make him eligible as a masternode. Getting sufficient TOMO \u00b6 As 50'000 TOMO are required to apply, the first thing to do is to fill out the following form : Loading... Our team will then review your request and send you the required funds. Note: Those TOMO are only usable in testnet, they have absolutely no trading value Applying to become a masternode \u00b6 You can now apply by going on the TomoMaster page. Login with the wallet that contains your newly received 50'000 TOMO. On the top right corner, click on \"Become a Candidate\". Enter the amount of TOMO you want to deposit (minimum 50'000). Enter your coinbase address. This is the public key of the account that your masternode is using. If your are running your node with tmn , you can simply run tmn inspect to get it. Confirm with apply and proceed to make the payement. Your full node will now be listed on TomoMaster. People can view its details and vote for it. If your node is in the top 150 most voted nodes, it will be promoted as a masternode and will start producing blocks at the next epoch. Resigning your masternode \u00b6 In case you want to stop your node, you need to resign it from the governance first in order to retrieve your locked funds. Access TomoMaster , go to your candidate detail page, and click the Resign button. Your funds will be available to withdraw 30 days after the resignation. After resigning successfully, you can stop your node. If you ran it with tmn , simply run: tmn remove At this point, your masternode is completly terminated.","title":"4. Apply your node"},{"location":"get-started/apply-node/#getting-sufficient-tomo","text":"As 50'000 TOMO are required to apply, the first thing to do is to fill out the following form : Loading... Our team will then review your request and send you the required funds. Note: Those TOMO are only usable in testnet, they have absolutely no trading value","title":"Getting sufficient TOMO"},{"location":"get-started/apply-node/#applying-to-become-a-masternode","text":"You can now apply by going on the TomoMaster page. Login with the wallet that contains your newly received 50'000 TOMO. On the top right corner, click on \"Become a Candidate\". Enter the amount of TOMO you want to deposit (minimum 50'000). Enter your coinbase address. This is the public key of the account that your masternode is using. If your are running your node with tmn , you can simply run tmn inspect to get it. Confirm with apply and proceed to make the payement. Your full node will now be listed on TomoMaster. People can view its details and vote for it. If your node is in the top 150 most voted nodes, it will be promoted as a masternode and will start producing blocks at the next epoch.","title":"Applying to become a masternode"},{"location":"get-started/apply-node/#resigning-your-masternode","text":"In case you want to stop your node, you need to resign it from the governance first in order to retrieve your locked funds. Access TomoMaster , go to your candidate detail page, and click the Resign button. Your funds will be available to withdraw 30 days after the resignation. After resigning successfully, you can stop your node. If you ran it with tmn , simply run: tmn remove At this point, your masternode is completly terminated.","title":"Resigning your masternode"},{"location":"get-started/run-node/","text":"With the recent release of TomoChain Testnet 2.0 with our PoSV consensus, you might be interested in creating a TomoChain full node and applying it to be a masternode. To run a full node and meet the requirements to apply on our governance DApp, you have to run two services: The TomoChain client , our TomoChain implementation written in Go . Telegraf , an agent to collect performance metrics of your full node. General hardware notice \u00b6 Our team extensively tested performances and came up with those minimal requirements for any TomoChain masternode host. Testnet Must be facing internet directly (no NAT, public IP) Must have at least 2 cores Must have at least 8GB of RAM Must use an IaaS (\"cloud\") provider of your choice (AWS, Digital Ocean, Google Cloud, etc.). Storage must be SSD Mainnet Must be facing internet directly (no NAT, public IP) Must have at least 8 cores Must have at least 32GB of RAM Must use an IaaS (\"cloud\") provider of your choice (AWS, Digital Ocean, Google Cloud, etc.) Storage must be SSD The full node will serve on port 30303 udp and tcp for p2p communication with other nodes, 8545 tcp for RPC api and 8546 tcp for websocket api. You may need to edit your firewall configuration accordingly. If you have other production grade environment than cloud provider at your displosal, please tell us more about on our Gitter . tmn \u00b6 We made a simple command line interface called tmn to easily and quickly start a TomoChain masternode. It takes care of starting the necessary docker containers with the proper settings for you. It will really suit you if you don't already have a big infrastructure running. Spin up a machine in your favorite cloud and get your masternode running in a few minutes! Prerequisites \u00b6 To use tmn, you should meet these requirements in addition to the hardware ones: Docker CE Python >= 3.5 Installation \u00b6 Simply install it from pip. pip3 install --user tmn Update \u00b6 Update it from pip. pip3 install -U tmn First start \u00b6 When you first start your full node with tmn, you need to give some informations. --name : The name of your full node. It should be formatted as a slug string. Slug format authorize all letters and numbers, dashes (\"-\") and underscores (\"_\"). You can name it to reflect your identity, company name, etc. --net : The network your full node will connect to. You can choose here to connect it to the TomoChain Testnet or Mainnet (once launched). --pkey : The private key of the account that your full node will use. A TomoChain full node uses an account to be uniquely identified and to receive transaction fee. Important note: we advise for security measures to use a fresh new account for your masternode. This is not the account who will receive the rewards. The rewards are sent to the account who will make the 50k TOMO initial deposit. It could look like this: tmn start --name [YOUR_NODE_NAME] \\ --net testnet \\ --pkey [YOUR_COINBASE_PRIVATE_KEY] Once started, you should see your node on the stats page ! Note: it can take up to one hour to properly sync the entire blockchain. Usage \u00b6 You can now interact with it via the other commands: stop : Stop your full node. start : Start your full node if it is stopped. status : The current status of your full node. inspect : Display the details related to your full node. Useful for applying your full node as a masternode. remove : Completely remove your masternode, unique identity and data. Troubleshooting \u00b6 tmn: command not found \u00b6 It might happen that your PATH is not set by default to include the default user binary directory. You can add it by adding it to your shell $PATH: On GNU/Linux: echo 'export PATH=$PATH:~/.local/bin' >> ~/.bashrc On MacOS: Replace [VERSION] by your version of python (3.5, 3.6, 3.7) echo 'export PATH=$PATH:~/Library/Python/[VERSION]/bin' >> ~/.bashrc error: could not access the docker daemon \u00b6 If you have installed Docker, you probably forgot to add your user to the docker group. Please run this, close your session and open it again. usermod -aG docker $your_user_name","title":"3. Run a node in testnet"},{"location":"get-started/run-node/#general-hardware-notice","text":"Our team extensively tested performances and came up with those minimal requirements for any TomoChain masternode host. Testnet Must be facing internet directly (no NAT, public IP) Must have at least 2 cores Must have at least 8GB of RAM Must use an IaaS (\"cloud\") provider of your choice (AWS, Digital Ocean, Google Cloud, etc.). Storage must be SSD Mainnet Must be facing internet directly (no NAT, public IP) Must have at least 8 cores Must have at least 32GB of RAM Must use an IaaS (\"cloud\") provider of your choice (AWS, Digital Ocean, Google Cloud, etc.) Storage must be SSD The full node will serve on port 30303 udp and tcp for p2p communication with other nodes, 8545 tcp for RPC api and 8546 tcp for websocket api. You may need to edit your firewall configuration accordingly. If you have other production grade environment than cloud provider at your displosal, please tell us more about on our Gitter .","title":"General hardware notice"},{"location":"get-started/run-node/#tmn","text":"We made a simple command line interface called tmn to easily and quickly start a TomoChain masternode. It takes care of starting the necessary docker containers with the proper settings for you. It will really suit you if you don't already have a big infrastructure running. Spin up a machine in your favorite cloud and get your masternode running in a few minutes!","title":"tmn"},{"location":"get-started/run-node/#prerequisites","text":"To use tmn, you should meet these requirements in addition to the hardware ones: Docker CE Python >= 3.5","title":"Prerequisites"},{"location":"get-started/run-node/#installation","text":"Simply install it from pip. pip3 install --user tmn","title":"Installation"},{"location":"get-started/run-node/#update","text":"Update it from pip. pip3 install -U tmn","title":"Update"},{"location":"get-started/run-node/#first-start","text":"When you first start your full node with tmn, you need to give some informations. --name : The name of your full node. It should be formatted as a slug string. Slug format authorize all letters and numbers, dashes (\"-\") and underscores (\"_\"). You can name it to reflect your identity, company name, etc. --net : The network your full node will connect to. You can choose here to connect it to the TomoChain Testnet or Mainnet (once launched). --pkey : The private key of the account that your full node will use. A TomoChain full node uses an account to be uniquely identified and to receive transaction fee. Important note: we advise for security measures to use a fresh new account for your masternode. This is not the account who will receive the rewards. The rewards are sent to the account who will make the 50k TOMO initial deposit. It could look like this: tmn start --name [YOUR_NODE_NAME] \\ --net testnet \\ --pkey [YOUR_COINBASE_PRIVATE_KEY] Once started, you should see your node on the stats page ! Note: it can take up to one hour to properly sync the entire blockchain.","title":"First start"},{"location":"get-started/run-node/#usage","text":"You can now interact with it via the other commands: stop : Stop your full node. start : Start your full node if it is stopped. status : The current status of your full node. inspect : Display the details related to your full node. Useful for applying your full node as a masternode. remove : Completely remove your masternode, unique identity and data.","title":"Usage"},{"location":"get-started/run-node/#troubleshooting","text":"","title":"Troubleshooting"},{"location":"get-started/run-node/#tmn-command-not-found","text":"It might happen that your PATH is not set by default to include the default user binary directory. You can add it by adding it to your shell $PATH: On GNU/Linux: echo 'export PATH=$PATH:~/.local/bin' >> ~/.bashrc On MacOS: Replace [VERSION] by your version of python (3.5, 3.6, 3.7) echo 'export PATH=$PATH:~/Library/Python/[VERSION]/bin' >> ~/.bashrc","title":"tmn: command not found"},{"location":"get-started/run-node/#error-could-not-access-the-docker-daemon","text":"If you have installed Docker, you probably forgot to add your user to the docker group. Please run this, close your session and open it again. usermod -aG docker $your_user_name","title":"error: could not access the docker daemon"},{"location":"get-started/voting/","text":"Prerequisites \u00b6 Have a wallet connected to the Testnet (See chapter 1 ) Introduction \u00b6 With a connected wallet, it's not time to try voting for some masternodes. Get some TOMO \u00b6 Info Testnet TOMO are only used for experimenting with the testnet. They have no value in the main blockchain and not market value. Using TomoWallet \u00b6 TomoWallet provides a function named Earn TOMO to test . It allows you to get 15 TOMO on the Testnet. Just click on it and you will see your balance go up. Note You can use this function only once. You then have to use the faucet for any extra Testnet TOMO needed. Using any wallets \u00b6 We also have a service called \"Faucet\" which allows you to get 15 TOMO at a time. Access the faucet site at: faucet.testnet.tomochain.com Enter your wallet address in the field and tick the I'm not a robot box. Click REQUEST 15 TOMO and Wait for some seconds for the transaction to be confirmed. You will receive a success confirmation message and the amount of TOMO in your wallet should be updated. You can check your TOMO balance by either looking at your wallet or using TomoScan . How To Vote \u00b6 Now you have some TOMO. You can access our governance dApp, TomoMaster , to start voting for masternodes. TomoMaster natively supports Metamask. You can also access your account page (the vertical three dots on the top right) to fill in your wallet Private Key or MNEMONIC (see image below). If you use Metamask, you need to connect Mettamask to our testnet (please see the \"Create a wallet\" section) and choose Metamask in the drop-down settings list. Once configured, you can vote for masternodes by clicking on the Vote button. At least 10 TOMO is required per vote. After clicking submit, your TOMO will be sent to the voting smart contract and locked there. Reward \u00b6 Every epoch (~30 minutes), you will automatically receive rewards for each masternode you voted for. How to Unvote \u00b6 If you do not want to support a masternode you voted for, you can unvote it by clicking the Unvote button on the masternode's page and enter the amount of TOMO you want to unvote. After unvoting, your TOMO is still locked in the smart contract for 48 hours before you are able to withdraw. How to Withdraw \u00b6 For withdrawals after unvoting, you need to wait until your TOMO is unlocked from the smart contract. Then you can click the withdraw button in your account page (the vertical three dots on the top right) and choose which withdrawal you want to receive back your TOMO. Note that you might see multiple withdrawals on your account page if you made multiple unvotes previously. If you withdraw before the unlock period expires, an error will be raised.","title":"2. Voting"},{"location":"get-started/voting/#prerequisites","text":"Have a wallet connected to the Testnet (See chapter 1 )","title":"Prerequisites"},{"location":"get-started/voting/#introduction","text":"With a connected wallet, it's not time to try voting for some masternodes.","title":"Introduction"},{"location":"get-started/voting/#get-some-tomo","text":"Info Testnet TOMO are only used for experimenting with the testnet. They have no value in the main blockchain and not market value.","title":"Get some TOMO"},{"location":"get-started/voting/#using-tomowallet","text":"TomoWallet provides a function named Earn TOMO to test . It allows you to get 15 TOMO on the Testnet. Just click on it and you will see your balance go up. Note You can use this function only once. You then have to use the faucet for any extra Testnet TOMO needed.","title":"Using TomoWallet"},{"location":"get-started/voting/#using-any-wallets","text":"We also have a service called \"Faucet\" which allows you to get 15 TOMO at a time. Access the faucet site at: faucet.testnet.tomochain.com Enter your wallet address in the field and tick the I'm not a robot box. Click REQUEST 15 TOMO and Wait for some seconds for the transaction to be confirmed. You will receive a success confirmation message and the amount of TOMO in your wallet should be updated. You can check your TOMO balance by either looking at your wallet or using TomoScan .","title":"Using any wallets"},{"location":"get-started/voting/#how-to-vote","text":"Now you have some TOMO. You can access our governance dApp, TomoMaster , to start voting for masternodes. TomoMaster natively supports Metamask. You can also access your account page (the vertical three dots on the top right) to fill in your wallet Private Key or MNEMONIC (see image below). If you use Metamask, you need to connect Mettamask to our testnet (please see the \"Create a wallet\" section) and choose Metamask in the drop-down settings list. Once configured, you can vote for masternodes by clicking on the Vote button. At least 10 TOMO is required per vote. After clicking submit, your TOMO will be sent to the voting smart contract and locked there.","title":"How To Vote"},{"location":"get-started/voting/#reward","text":"Every epoch (~30 minutes), you will automatically receive rewards for each masternode you voted for.","title":"Reward"},{"location":"get-started/voting/#how-to-unvote","text":"If you do not want to support a masternode you voted for, you can unvote it by clicking the Unvote button on the masternode's page and enter the amount of TOMO you want to unvote. After unvoting, your TOMO is still locked in the smart contract for 48 hours before you are able to withdraw.","title":"How to Unvote"},{"location":"get-started/voting/#how-to-withdraw","text":"For withdrawals after unvoting, you need to wait until your TOMO is unlocked from the smart contract. Then you can click the withdraw button in your account page (the vertical three dots on the top right) and choose which withdrawal you want to receive back your TOMO. Note that you might see multiple withdrawals on your account page if you made multiple unvotes previously. If you withdraw before the unlock period expires, an error will be raised.","title":"How to Withdraw"},{"location":"get-started/wallet/","text":"Metamask \u00b6 TomoChain will guide you how to connect MetaMask to TomoChain Testnet. It is an essential step to study an overview of TomoChain features in term of meeting the crypto trading needs on system. Get started! You first need to install Extension MetaMask on Chrome or Brave browsers. Once you agree to the Metamask Terms of Use and create an account successfully, follow instructions: Step 1: Click to MetaMask logo on the browser to open the Extention -> select Network -> select Custom RPC as shown below: Step 2: When Setting screen pops up, you enter https://testnet.tomochain.com into New RPC URL Texbox then Save. Step 3: You successfully connect to TomoChain Testnet after 2 steps. Next, you use TOMO to pay a Gas fee to implement Smart Contact. To have some TOMO in the testnet, you can enter your wallet address in Faucet site https://faucet.testnet.tomochain.com/ to request some TOMO. So, you accomplish connecting the MetaMask to TomoChain (testnet). From now on, you can make transactions and develop Dapp as well as Smart Contract as you wish. MyEtherWallet \u00b6 Step 2: From MyEtherWallet homepage, at top right corner, select TomoChain Testnet Step 3: Import/create a wallet, view the balance and make a transaction to send TOMO to another address. All transactions you make will be recorded in TomoChain and transparently viewed on TomoScan. You are able to use hardware wallets (Trezor, Ledger Nano S) in MyEtherWallet to connect TomoChain Testnet. TomoWallet \u00b6 TomoWallet is now available at https://wallet.testnet.tomochain.com . You can create a wallet, get some TOMO on the testnet and transfer/receive TOMO back and forth. Note: At the moment, TomoWallet only works on TomoChain Testnet. So all TOMO you have in TomoWallet is only for testing purpose. Create a new wallet \u00b6 On the first page, click CREATE NEW WALLET button. TomoWallet will automatically create a new wallet and show up the address, qr code and the balance in your home page. Earn TOMO \u00b6 On the homepage, click Earn TOMO to test on the bottom left corner. Click REQUEST button and wait a couple of seconds to get some TOMO. Transfer TOMO \u00b6 On left menu, click Tranfer to go to Tranfer TOMO page. Enter a valid recipient address and amount TOMO you want to send and click SEND . After few seconds, your transaction will be presented at Transactions page as the below: Delete a wallet \u00b6 In case, you want to access other wallets, then delete the current wallet. Make sure you backup Private Key and Recovery Phrases so you can import your wallet again. To delete your wallet, go to details page, and click DELETE THIS WALLET button. Import your wallet \u00b6 On the first page, click IMPORT YOUR WALLET . Enter our Private Key or Recovery Phrases Click IMPORT button.","title":"1. Connect your wallet"},{"location":"get-started/wallet/#metamask","text":"TomoChain will guide you how to connect MetaMask to TomoChain Testnet. It is an essential step to study an overview of TomoChain features in term of meeting the crypto trading needs on system. Get started! You first need to install Extension MetaMask on Chrome or Brave browsers. Once you agree to the Metamask Terms of Use and create an account successfully, follow instructions: Step 1: Click to MetaMask logo on the browser to open the Extention -> select Network -> select Custom RPC as shown below: Step 2: When Setting screen pops up, you enter https://testnet.tomochain.com into New RPC URL Texbox then Save. Step 3: You successfully connect to TomoChain Testnet after 2 steps. Next, you use TOMO to pay a Gas fee to implement Smart Contact. To have some TOMO in the testnet, you can enter your wallet address in Faucet site https://faucet.testnet.tomochain.com/ to request some TOMO. So, you accomplish connecting the MetaMask to TomoChain (testnet). From now on, you can make transactions and develop Dapp as well as Smart Contract as you wish.","title":"Metamask"},{"location":"get-started/wallet/#myetherwallet","text":"Step 2: From MyEtherWallet homepage, at top right corner, select TomoChain Testnet Step 3: Import/create a wallet, view the balance and make a transaction to send TOMO to another address. All transactions you make will be recorded in TomoChain and transparently viewed on TomoScan. You are able to use hardware wallets (Trezor, Ledger Nano S) in MyEtherWallet to connect TomoChain Testnet.","title":"MyEtherWallet"},{"location":"get-started/wallet/#tomowallet","text":"TomoWallet is now available at https://wallet.testnet.tomochain.com . You can create a wallet, get some TOMO on the testnet and transfer/receive TOMO back and forth. Note: At the moment, TomoWallet only works on TomoChain Testnet. So all TOMO you have in TomoWallet is only for testing purpose.","title":"TomoWallet"},{"location":"get-started/wallet/#create-a-new-wallet","text":"On the first page, click CREATE NEW WALLET button. TomoWallet will automatically create a new wallet and show up the address, qr code and the balance in your home page.","title":"Create a new wallet"},{"location":"get-started/wallet/#earn-tomo","text":"On the homepage, click Earn TOMO to test on the bottom left corner. Click REQUEST button and wait a couple of seconds to get some TOMO.","title":"Earn TOMO"},{"location":"get-started/wallet/#transfer-tomo","text":"On left menu, click Tranfer to go to Tranfer TOMO page. Enter a valid recipient address and amount TOMO you want to send and click SEND . After few seconds, your transaction will be presented at Transactions page as the below:","title":"Transfer TOMO"},{"location":"get-started/wallet/#delete-a-wallet","text":"In case, you want to access other wallets, then delete the current wallet. Make sure you backup Private Key and Recovery Phrases so you can import your wallet again. To delete your wallet, go to details page, and click DELETE THIS WALLET button.","title":"Delete a wallet"},{"location":"get-started/wallet/#import-your-wallet","text":"On the first page, click IMPORT YOUR WALLET . Enter our Private Key or Recovery Phrases Click IMPORT button.","title":"Import your wallet"},{"location":"masternode/applying/","text":"Once your full node is up and running, you need to apply to make it eligible as a masternode. Masternodes will receive a significant amount of block rewards, which likely exceeds the cost for running the infrastructure. However, masternode candidates need to invest in TomoChain by depositing at least 50'000 Tomo, and stake them for a long term. Furthermore, after the initial deposit to become a candidate, if he doesn't make it to the top 150 most voted candidates, he will not be promoted as masternode and thus receive no rewards. Therefore, candidates have an incentive to do as much as they can such as signalling their capability to support TomoChain to get into top 150 most voted candidates. Requirements \u00b6 To have a masternode candidate, the following requirements must be satisfied: The token holder has an up and running node -- see our documentation . The token holder must hold a minimum required amount of tokens (50 000 TOMO). These 50 000 TOMO are deposited to the Voting Smart Contract. Must be one of the 150 most voted masternode candidates in the system. The voting by token holders is credited through a Voting DApp that allows token holders to send TOMO through the smart contract mechanism. Applying to become a masternode \u00b6 You can apply by going on TomoMaster . Connect the wallet that contains the funds you want to deposit. Warning The wallet who makes the initial deposit will be the one receiving block rewards. On the top right corner, click on \"Become a Candidate\". Enter the amount of TOMO you want to deposit (minimum 50'000). Enter your coinbase address. This is the address of the account that your masternode is using. If your are running your node with tmn , you can simply run tmn inspect to get it. Important note: We advise for security measures to use a fresh new account for your masternode or 'coinbase address'. This is not the account that will receive the rewards. The rewards are sent to the account that will make the 50k TOMO initial deposit. Confirm with apply and proceed to make the payment. Your full node will now be listed on TomoMaster. People can view its details and vote for it. A candidate becomes a masternode when it belongs to top 150 most voted candidates in each epoch. Info An epoch is a period of 900 blocks (~ 30 minutes) starting from block #1 If your node is in the top 150 most voted candidates at the checkpoint between two epochs, it will be promoted as a masternode and will start producing blocks at the next epoch. Resigning your masternode \u00b6 In case you want to stop your node, you need to resign it from the governance first in order to retrieve your locked funds. Access TomoMaster, go to your candidate detail page, and click the Resign button. Your funds will be available to withdraw 30 days after the resignation (1,296,000 blocks). After resigning successfully, you can stop your node. If you ran it with tmn , simply run: tmn remove At this point, your masternode is completely terminated.","title":"Applying"},{"location":"masternode/applying/#requirements","text":"To have a masternode candidate, the following requirements must be satisfied: The token holder has an up and running node -- see our documentation . The token holder must hold a minimum required amount of tokens (50 000 TOMO). These 50 000 TOMO are deposited to the Voting Smart Contract. Must be one of the 150 most voted masternode candidates in the system. The voting by token holders is credited through a Voting DApp that allows token holders to send TOMO through the smart contract mechanism.","title":"Requirements"},{"location":"masternode/applying/#applying-to-become-a-masternode","text":"You can apply by going on TomoMaster . Connect the wallet that contains the funds you want to deposit. Warning The wallet who makes the initial deposit will be the one receiving block rewards. On the top right corner, click on \"Become a Candidate\". Enter the amount of TOMO you want to deposit (minimum 50'000). Enter your coinbase address. This is the address of the account that your masternode is using. If your are running your node with tmn , you can simply run tmn inspect to get it. Important note: We advise for security measures to use a fresh new account for your masternode or 'coinbase address'. This is not the account that will receive the rewards. The rewards are sent to the account that will make the 50k TOMO initial deposit. Confirm with apply and proceed to make the payment. Your full node will now be listed on TomoMaster. People can view its details and vote for it. A candidate becomes a masternode when it belongs to top 150 most voted candidates in each epoch. Info An epoch is a period of 900 blocks (~ 30 minutes) starting from block #1 If your node is in the top 150 most voted candidates at the checkpoint between two epochs, it will be promoted as a masternode and will start producing blocks at the next epoch.","title":"Applying to become a masternode"},{"location":"masternode/applying/#resigning-your-masternode","text":"In case you want to stop your node, you need to resign it from the governance first in order to retrieve your locked funds. Access TomoMaster, go to your candidate detail page, and click the Resign button. Your funds will be available to withdraw 30 days after the resignation (1,296,000 blocks). After resigning successfully, you can stop your node. If you ran it with tmn , simply run: tmn remove At this point, your masternode is completely terminated.","title":"Resigning your masternode"},{"location":"masternode/tmn/","text":"We made a simple command line interface called tmn to easily and quickly start a TomoChain masternode. It takes care of starting the necessary docker containers with the proper settings for you. It will really suit you if you don't already have a big infrastructure running. Spin up a machine in your favorite cloud and get your masternode running in a few minutes! Prerequisites \u00b6 Python >= 3.5 and Docker are required. Python >= 3.5 Docker CE Installation of Python \u00b6 To install Python under debian based distribution, run the following commands. apt update apt install python3-pip To check if you have installed the right Python version (must be greater than 3.5). python3 --version Installation of Docker CE \u00b6 To install Docker, first update the apt package index. sudo apt update Then Install packages to allow apt to use a repository over HTTPS. sudo apt install apt-transport-https ca-certificates curl software-properties-common Add Docker\u2019s official GPG key. curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add - Verify that you now have the key with the fingerprint 9DC8 5822 9FC7 DD38 854A E2D8 8D81 803C 0EBF CD88 , by searching for the last 8 characters of the fingerprint. apt-key fingerprint 0EBFCD88 Set up the stable Docker repository. sudo add-apt-repository \"deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable\" Update the apt package index. Then install the latest version of Docker CE. sudo apt update sudo apt install docker-ce Once installed, add your current user to the Docker group. usermod -aG docker $your_user_name Warning You need to relog into your account for this to take effect. Verify that Docker CE is installed correctly by running the hello-world image: docker run hello-world This command downloads a test image and runs it in a container. When the container runs, it prints an informational message and exits. tmn \u00b6 Installation \u00b6 Simply install it from pip. pip3 install --user tmn Update \u00b6 Update it from pip. pip3 install -U tmn First start \u00b6 When you first start your full node with tmn, you need to give some information. --name : The name of your full node. It should be formatted as a slug string. Slug format authorize all letters and numbers, dashes (\"-\") and underscores (\"_\"). You can name it to reflect your identity, company name, etc. --net : The network your full node will connect to. You can choose here to connect it to the TomoChain Testnet or Mainnet (once launched). --pkey : The private key of the account that your full node will use. A TomoChain full node uses an account to be uniquely identified and to receive transaction fee. Important note: We advise for security measures to use a fresh new account for your masternode. This is not the account who will receive the rewards. The rewards are sent to the account who will make the 50k TOMO initial deposit. It could look like this: tmn start --name [YOUR_NODE_NAME] --net testnet --pkey [YOUR_COINBASE_PRIVATE_KEY] Once started, you should see your node on the stats page ! Note: it can take up to one hour to properly sync the entire blockchain. Usage \u00b6 You can now interact with it via the other commands: stop : Stop your full node. start : Start your full node if it is stopped. status : The current status of your full node. inspect : Display the details related to your full node. Useful for applying your full node as a masternode. remove : Completely remove your masternode, unique identity and data. Troubleshooting \u00b6 tmn: command not found \u00b6 It might happen that your PATH is not set by default to include the default user binary directory. You can add it by adding it to your shell $PATH: On GNU/Linux: echo 'export PATH=$PATH:$HOME/.local/bin' >> $HOME/.bashrc On MacOS: Replace [VERSION] by your version of python (3.5, 3.6, 3.7) echo 'export PATH=$PATH:$HOME/Library/Python/[VERSION]/bin' >> $HOME/.bashrc error: could not access the docker daemon \u00b6 If you have installed Docker, you probably forgot to add your user to the docker group. Please run this, close your session and open it again. usermod -aG docker $your_user_name","title":"Tmn"},{"location":"masternode/tmn/#prerequisites","text":"Python >= 3.5 and Docker are required. Python >= 3.5 Docker CE","title":"Prerequisites"},{"location":"masternode/tmn/#installation-of-python","text":"To install Python under debian based distribution, run the following commands. apt update apt install python3-pip To check if you have installed the right Python version (must be greater than 3.5). python3 --version","title":"Installation of Python"},{"location":"masternode/tmn/#installation-of-docker-ce","text":"To install Docker, first update the apt package index. sudo apt update Then Install packages to allow apt to use a repository over HTTPS. sudo apt install apt-transport-https ca-certificates curl software-properties-common Add Docker\u2019s official GPG key. curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add - Verify that you now have the key with the fingerprint 9DC8 5822 9FC7 DD38 854A E2D8 8D81 803C 0EBF CD88 , by searching for the last 8 characters of the fingerprint. apt-key fingerprint 0EBFCD88 Set up the stable Docker repository. sudo add-apt-repository \"deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable\" Update the apt package index. Then install the latest version of Docker CE. sudo apt update sudo apt install docker-ce Once installed, add your current user to the Docker group. usermod -aG docker $your_user_name Warning You need to relog into your account for this to take effect. Verify that Docker CE is installed correctly by running the hello-world image: docker run hello-world This command downloads a test image and runs it in a container. When the container runs, it prints an informational message and exits.","title":"Installation of Docker CE"},{"location":"masternode/tmn/#tmn","text":"","title":"tmn"},{"location":"masternode/tmn/#installation","text":"Simply install it from pip. pip3 install --user tmn","title":"Installation"},{"location":"masternode/tmn/#update","text":"Update it from pip. pip3 install -U tmn","title":"Update"},{"location":"masternode/tmn/#first-start","text":"When you first start your full node with tmn, you need to give some information. --name : The name of your full node. It should be formatted as a slug string. Slug format authorize all letters and numbers, dashes (\"-\") and underscores (\"_\"). You can name it to reflect your identity, company name, etc. --net : The network your full node will connect to. You can choose here to connect it to the TomoChain Testnet or Mainnet (once launched). --pkey : The private key of the account that your full node will use. A TomoChain full node uses an account to be uniquely identified and to receive transaction fee. Important note: We advise for security measures to use a fresh new account for your masternode. This is not the account who will receive the rewards. The rewards are sent to the account who will make the 50k TOMO initial deposit. It could look like this: tmn start --name [YOUR_NODE_NAME] --net testnet --pkey [YOUR_COINBASE_PRIVATE_KEY] Once started, you should see your node on the stats page ! Note: it can take up to one hour to properly sync the entire blockchain.","title":"First start"},{"location":"masternode/tmn/#usage","text":"You can now interact with it via the other commands: stop : Stop your full node. start : Start your full node if it is stopped. status : The current status of your full node. inspect : Display the details related to your full node. Useful for applying your full node as a masternode. remove : Completely remove your masternode, unique identity and data.","title":"Usage"},{"location":"masternode/tmn/#troubleshooting","text":"","title":"Troubleshooting"},{"location":"masternode/tmn/#tmn-command-not-found","text":"It might happen that your PATH is not set by default to include the default user binary directory. You can add it by adding it to your shell $PATH: On GNU/Linux: echo 'export PATH=$PATH:$HOME/.local/bin' >> $HOME/.bashrc On MacOS: Replace [VERSION] by your version of python (3.5, 3.6, 3.7) echo 'export PATH=$PATH:$HOME/Library/Python/[VERSION]/bin' >> $HOME/.bashrc","title":"tmn: command not found"},{"location":"masternode/tmn/#error-could-not-access-the-docker-daemon","text":"If you have installed Docker, you probably forgot to add your user to the docker group. Please run this, close your session and open it again. usermod -aG docker $your_user_name","title":"error: could not access the docker daemon"},{"location":"misc/wip/","text":"Work in progress \u00b6 We are working hard to provide a complete documentation for all our products but this page is not yet ready. If you have any questions, please join us on Gitter .","title":"Work in progress"},{"location":"misc/wip/#work-in-progress","text":"We are working hard to provide a complete documentation for all our products but this page is not yet ready. If you have any questions, please join us on Gitter .","title":"Work in progress"},{"location":"tomomaster/features/","text":"Here are the pages and features available on TomoMaster. Home \u00b6 Network Status \u00b6 On TomoMaster, this area shows you what the current block is, the block time, how many blocks are in each epoch, and the next checkpoint (end of epoch). Candidates List \u00b6 The candidates list includes everyone who has deposited enough tokens to run a masternode as well as those who resigned running a masternode. A candidate is required to be one of the top 150 most voted masternode candidates on this list to become a masternode earning rewards. Voters can use this list to help choose which masternode candidate(s) they would like to stake their tokens for. Tip Voting for the top voted masternode candidate could lower your rewards as the rewards that go to voters per token is inversely proportional to the number of tokens staked for a specific masternode. Voting \u00b6 Voters who want to stake their tokens for a masternode or masternodes in order to earn rewards can vote through TomoMaster. Simply click \u2018Vote\u2019 and you will be taken to a page that allows you to vote through staking your tokens. Unvoting \u00b6 If you do not want to support a masternode you voted for, you can unvote it by clicking the Unvote button on the masternode's page and enter the amount of TOMO you want to unvote. Warning After unvoting, your TOMO will be locked in the smart contract for 48 hours before you are able to withdraw. Candidate \u00b6 General Information \u00b6 On the top of the page, you can find general information on a masternode candidate. Voters can use this information to better understand the masternode candidates they plan to vote for. Metrics \u00b6 The metrics area shows the performance of the masternode. This section is useful to see if the masternode candidate is strong or weak. Rewards \u00b6 The rewards section shows the estimated rewards the masternode has been receiving. If the masternode has been receiving less rewards than other masternodes, it might be a weak masternode. Voters \u00b6 Under the section for voters, you can see the list of TOMO stakers who voted for this candidate. Signs \u00b6 In this section, you can see all transactions that the candidate signed. Transactions \u00b6 In this section, you can see all transactions of this candidate. Voter \u00b6 General Information \u00b6 On this page you can find general information about specific voters. Tip As a voter, use this page to make sure you're earning your fair share of rewards. Candidates \u00b6 The candidates section shows all masternode candidates that have been voted by this voter. Rewards \u00b6 The rewards section shows the rewards the voter has been receiving. Tip If you voted an equal amount of TOMO for different masternodes and you see one is giving less rewards, you may have voted for a weak masternode and should consider changing your vote. Transactions \u00b6 This section shows all transactions by the voter. Settings \u00b6 Network Provider \u00b6 Use settings to select the network provider you are using for TomoMaster (e.g., Metamask, TomoChain Testnet, Custom Network). Account Infos \u00b6 This section will show you information about your public address and TOMO balance. Apply \u00b6 This web page is used by TOMO holders looking to apply to become a masternode candidate. Search \u00b6 On the top of the page, you can find a search bar. You can use this bar to search for a Candidate or Voter by its address. Tip The search will not work if your input is not an address.","title":"Features"},{"location":"tomomaster/features/#home","text":"","title":"Home"},{"location":"tomomaster/features/#network-status","text":"On TomoMaster, this area shows you what the current block is, the block time, how many blocks are in each epoch, and the next checkpoint (end of epoch).","title":"Network Status"},{"location":"tomomaster/features/#candidates-list","text":"The candidates list includes everyone who has deposited enough tokens to run a masternode as well as those who resigned running a masternode. A candidate is required to be one of the top 150 most voted masternode candidates on this list to become a masternode earning rewards. Voters can use this list to help choose which masternode candidate(s) they would like to stake their tokens for. Tip Voting for the top voted masternode candidate could lower your rewards as the rewards that go to voters per token is inversely proportional to the number of tokens staked for a specific masternode.","title":"Candidates List"},{"location":"tomomaster/features/#voting","text":"Voters who want to stake their tokens for a masternode or masternodes in order to earn rewards can vote through TomoMaster. Simply click \u2018Vote\u2019 and you will be taken to a page that allows you to vote through staking your tokens.","title":"Voting"},{"location":"tomomaster/features/#unvoting","text":"If you do not want to support a masternode you voted for, you can unvote it by clicking the Unvote button on the masternode's page and enter the amount of TOMO you want to unvote. Warning After unvoting, your TOMO will be locked in the smart contract for 48 hours before you are able to withdraw.","title":"Unvoting"},{"location":"tomomaster/features/#candidate","text":"","title":"Candidate"},{"location":"tomomaster/features/#general-information","text":"On the top of the page, you can find general information on a masternode candidate. Voters can use this information to better understand the masternode candidates they plan to vote for.","title":"General Information"},{"location":"tomomaster/features/#metrics","text":"The metrics area shows the performance of the masternode. This section is useful to see if the masternode candidate is strong or weak.","title":"Metrics"},{"location":"tomomaster/features/#rewards","text":"The rewards section shows the estimated rewards the masternode has been receiving. If the masternode has been receiving less rewards than other masternodes, it might be a weak masternode.","title":"Rewards"},{"location":"tomomaster/features/#voters","text":"Under the section for voters, you can see the list of TOMO stakers who voted for this candidate.","title":"Voters"},{"location":"tomomaster/features/#signs","text":"In this section, you can see all transactions that the candidate signed.","title":"Signs"},{"location":"tomomaster/features/#transactions","text":"In this section, you can see all transactions of this candidate.","title":"Transactions"},{"location":"tomomaster/features/#voter","text":"","title":"Voter"},{"location":"tomomaster/features/#general-information_1","text":"On this page you can find general information about specific voters. Tip As a voter, use this page to make sure you're earning your fair share of rewards.","title":"General Information"},{"location":"tomomaster/features/#candidates","text":"The candidates section shows all masternode candidates that have been voted by this voter.","title":"Candidates"},{"location":"tomomaster/features/#rewards_1","text":"The rewards section shows the rewards the voter has been receiving. Tip If you voted an equal amount of TOMO for different masternodes and you see one is giving less rewards, you may have voted for a weak masternode and should consider changing your vote.","title":"Rewards"},{"location":"tomomaster/features/#transactions_1","text":"This section shows all transactions by the voter.","title":"Transactions"},{"location":"tomomaster/features/#settings","text":"","title":"Settings"},{"location":"tomomaster/features/#network-provider","text":"Use settings to select the network provider you are using for TomoMaster (e.g., Metamask, TomoChain Testnet, Custom Network).","title":"Network Provider"},{"location":"tomomaster/features/#account-infos","text":"This section will show you information about your public address and TOMO balance.","title":"Account Infos"},{"location":"tomomaster/features/#apply","text":"This web page is used by TOMO holders looking to apply to become a masternode candidate.","title":"Apply"},{"location":"tomomaster/features/#search","text":"On the top of the page, you can find a search bar. You can use this bar to search for a Candidate or Voter by its address. Tip The search will not work if your input is not an address.","title":"Search"},{"location":"wp-and-research/economics-paper/","text":"TOMOCHAIN - The Most Efficient Platform for the Token Economy \u00b6 Preface \u00b6 TomoChain's vision and mission \u00b6 Our mission is to be a leading force in building the Internet of Value, and its infrastructure. We are working to create an alternative, scalable financial system which is more secure, transparent, efficient, inclusive and equitable for everyone. TomoChain is an innovative solution to the scalability problem with the Ethereum blockchain, and other current blockchain platforms. TomoChain relies on a system of 150 Masternodes with Proof of Stake Voting (PoSV) consensus that can support near-zero fee, and 2-second transaction confirmation time. Security, stability and chain finality are guaranteed via novel techniques such as double validation, staking via smart-contracts and \"true\" randomization processes. TomoChain supports all EVM-compatible smart-contracts, protocols, and atomic cross-chain token transfers. New scaling techniques such as sharding, EVM parallelisation, private-chain generation, hardware integration will be continuously researched and incorporated into TomoChain's Masternode architecture which will be an ideal scalable smart-contract public blockchain for decentralized apps, token issuances and token integrations for small and big businesses. Scope \u00b6 This document describes TomoChain\u2019s initial draft for the TomoChain blockchain\u2019s economics system. Masternodes \u00b6 Masternodes are full-nodes that create, verify and validate new blocks in TomoChain\u2019s platform. Masternode Candidate : Any account can deposit 50K TOMO using the official on-chain governance d-app to become a Masternode Candidate. 50K TOMO deposit can earn staking rewards. A Candidate can resign, but the tokens will be locked for the next 30 days (1,296,000 blocks) after the resignation. Becoming a Masternode : A Candidate becomes a Masternode when he/she belongs to top 150 most voted Candidates in each epoch. A Masternode can resign, but the tokens will be locked for the next 30 days after the resignation. Reward : The reward a Masternode receives in each epoch is proportional to the number of signatures he/she signs. Token Voting and Staking \u00b6 Token voting : Token holders can vote for Masternode Candidates by sending TOMO to each Candidate specific voting address using the official governance d-app. Top 150 most voted Candidates will become Masternodes. Token holders can un-vote a Candidate, but the tokens will be locked for the next 48 hours (86,400 blocks) after the un-voting. Staking : Masternode token deposits, and all tokens used to vote for Masternodes will enter staking program, and earn block rewards in each epoch, plus any fees. Tokens used to vote for Candidates who do not become Masternodes will not earn staking reward. Token Emission Schedule \u00b6 Following the fundraising commitment : The total amount of tokens at the genesis block is 55 million TOMO tokens in circulation; 12 millions are reserved for the team vested over the next 4 years; 16 millions are reserved for strategic partners, and an ecosystem building fund which totals 83 millions tokens. Plus, 17 millions are reserved as block rewards for the next 8 years, the amount of tokens in circulation at the end of the 8th year after the genesis block is around 100 million TOMO. After the mainnet: the block reward for the first and second year is 4 million TOMO annually; the block reward for the 3rd, 4th, 5th year is 2 millions TOMO annually ; and the block reward for the 6th, 7th and 8th year is 1 million TOMO annually . Subsequently, the block reward will be halted, or activated at a number less than or equal to 1 million TOMO annually. Implementation : Each epoch consists of 900 blocks, which will reward a total of 250 TOMO in the first two years. 250 TOMO will be divided to all the Masternodes proportional to the number of signatures they sign during the epoch. Afterward, the reward achieved by each Masternode will be divided into three portions. The first portion of 40% called \u201cInfrastructure Reward\u201d goes to the Masternode. The second portion of 50% called \u201cStaking Reward\u201d goes to the pool of all voters for that Masternode which is shared proportionally based on the token stake. The last portion of 10% called \u201cFoundation Reward\u201d goes to a special account controlled by the Masternode Foundation, which is run by TomoChain company initially. Voting/Staking Consideration \u00b6 Candidate/Masternode incentives \u00b6 Masternodes will receive a significant amount of block rewards, which likely exceeds the cost for running the infrastructure. However, Masternodes need to invest in TomoChain by depositing at least 50K Tomo, and stake them for a long term. Furthermore, after depositing 50K TOMO to become a Candidate, if the account cannot become a Masternode (has less votes than Top 150 most voted Candidates), he/she will receive no rewards. Therefore, Candidates have an incentive to do as much as they can such as signaling their capability to support TomoChain to get into top 150 most voted Candidates. Token voter incentives \u00b6 Token voters should vote for Candidates who signal a strong support for TomoChain because if the Candidate does not become a Masternode, voters will not receive any rewards. However, token voters should also vote for the less voted Candidates because the most voted Candidates will receive less reward per token stake comparatively. Long Term Platform Economics Consideration \u00b6 P/E theory of token value \u00b6 Equity price can often be a multiple of annual earnings a company generates. In the case of a blockchain platform, earnings could be considered as the total rewards and fees that the platform produces. The multiples for technology startups in the early days could exceed 200 which is where Ethereum network is approximately at the moment. Quantity theory of money for token value \u00b6 In this theory, the total amount of TOMO can be considered the money supply for the blockchain economy including all the d-apps and tokens on top of TomoChain. Assuming a constant price, and velocity of money, demand for money will raise proportionally to the total amount of activities of the whole blockchain network, which will raise the price of TOMO if the supply of Tomo is fixed, or the inflation rate is very small. TomoChain\u2019s advantages of minimal transaction fee, and very fast confirmation time could spur a massive amount of activities for Tomo tokens, and other tokens on top of TomoChain. Store of value theory of token value \u00b6 Blockchain native tokens can be considered as the means of fundraising, or the store of value within their own blockchain economy if the supply of the token is fixed, or the inflation rate is very small, and predictable. These conditions are applying to Ether and Bitcoin at the moment, and can be applying to TOMO token in the future as the Tomochain\u2019s economy grows. Built-in decentralized exchange \u00b6 TomoChain roadmap includes a built-in decentralized exchange, in which a portion of fees will be added to the pool of epoch rewards. These fees could be substantial if there are many valuable tokens on top of TomoChain. This extra feature can increase the future earnings of the network, and raise TOMO price based on the P/E theory. Decentralized Governance \u00b6 Become a Masternode \u00b6 Becoming a Masternode is an important signal of long-term support for TomoChain platform. We would welcome other entities to become a Masternode, to show their supports by helping the network, and gradually decentralize the platform governance. Masternode Council \u00b6 It is postulated that TomoChain platform would later be coordinated by non-profit body such as Masternode Council (or Foundation) amongst many other decentralized bodies which receive a steady amount of income from the network, and act solely in the interest of the network. Technical decision making \u00b6 The technical decisions should be considered, debated, and decided upon by qualified experts based on the long-term interest of the network. Economic decision making \u00b6 The economic decisions such as the amount of block rewards, inflation rate, the division of block rewards might be based on the consensus of majority of the Masternodes (with their voters). Masternode Council could be one of the coordinating bodies for these activities using the official governance d-app. Appendix A: History of the Project \u00b6 TomoChain PTE. LTD. raised funds to build TomoChain blockchain platform in early 2018. The ICO whitepaper is at https://goo.gl/avtnZ1. The terms of sale and other documents can be found at https://tomochain.com/exchanges TomoChain platform will be gradually decentralized in 2-8 years after the mainnet launch, and eventually become a secure public blockchain platform for everyone. Appendix B: Reward Calculation Formula and Details \u00b6 General notations \u00b6 N: the current number of masternodes, maximum of N = 1..150 M_1 , M_2 , .., M_N : the set of masternodes in the current epoch C_1 , C_2 , .., C_N : the number of signatures a masternode has made S_1 , S_2 , .., S_N : the total amount of staked (including deposited and voted) TOMO for a masternode D_1 , D_2 , .., D_N : the amount of deposited TOMO by a masternode X: the total reward per epoch for all masternodes Total reward per masternode = Infrastructure reward + staking reward MN: stand for masternode Reward divided to Masternode M_i : R_i = \\frac{C_i*X}{\\sum_{i=1}^{N}C_i} Reward per epoch: Masternode infrastructure reward: 0.4 R_i Voter with 1k voted TOMO: \\frac{0.5R_i*1000}{S_i} Masternode staking reward: \\frac{0.5R_i*D_i}{S_i} Reward per week (48 * 7 = 336 epochs): Masternode infrastructure reward: 336 * 0.4 R_i Voter with 1k voted TOMO: 336 * \\frac{0.5R_i*1000}{S_i} Masternode staking reward: 336 * \\frac{0.5R_i*D_i}{S_i} Reward per year (48 * 365 = 17520 epochs): Masternode infrastructure: 17520 * 0.4 R_i Voter with 1k voted TOMO: 17520 * \\frac{0.5R_i*1000}{S_i} Masternode staking reward: 17520 * \\frac{0.5R_i*D_i}{S_i} Total reward for a masternode: 17520 * 0.4 R_i + 17520 * \\frac{0.5R_i*D_i}{S_i} Applying the reward calculation formula to specific scenarios \u00b6 Note that, for simplification of illustration: The total amount of staked TOMO for all masternodes is equal The signatures for all masternodes in the scenarios are equal With these assumptions, all masternodes receive the same divided reward (R) and the same infrastructure reward. Furthermore, the reward for Voters with 1k voted TOMO is equal regardless of which the amount is voted for. Scenario 1: 50 Masternodes, 2.5 million token voting, a total of 5 million token locked. \u00b6 N = 50, X = 250, S_1 = S_2 = .. = S_{50} = 5 000 000 / 50 = 100k TOMO C_1 = C_2 = .. = C_{50} Therefore, R_1 = R_2 = .. = R_{50} = R = X/50 = 5 TOMO Reward per epoch: \u00b6 MN infrastructure reward = 0.4 * 5 = 2 TOMO For Voter with 1k voted = (0.5 * 5 * 1000) / 100k = 0.025 TOMO MN staking reward with 50k TOMO deposited: 50 * 0.025 = 1.25 TOMO Reward per week: \u00b6 MN infrastructure reward = 336 * 2 = 672 TOMO For Voter with 1k voted = 336 * 0.025 = 8.4 TOMO MN staking reward with D = 50k TOMO deposited: 336 * 1.25 = 420 TOMO Reward per year: \u00b6 MN infrastructure reward = 17520 * 2 = 35 040 TOMO For Voter with 1k voted = 17520 * 0.025 = 438 TOMO MN staking reward with 50k deposited: 17520 * 1.25 = 21900 TOMO Total reward per MN with D = 50k deposited: 35 040 + 21 900 = 56940 TOMO Scenario 2: 100 Masternodes, 3 million token voting, a total of 8 million token locked. \u00b6 N = 100, X = 250, S_1 = S_2 = .. = S_{100} = 8 000 000 / 100 = 80k TOMO C_1 = C_2 = .. = C_{100} Therefore, R_1 = R_2 = .. = R_{100} = R = X/100 = 2.5 TOMO Reward per epoch: \u00b6 MN infrastructure reward = 0.4 * 2.5 = 1 TOMO For Voter with 1k voted = (0.5 * 2.5 * 1000) / 80k = 0.015625 MN staking reward with D = 50k deposited: 50 * 0.015625 = 0.78125 TOMO Reward per week: \u00b6 MN infrastructure reward = 336 * 1 = 336 TOMO For Voter with 1k voted = 336 * 0.015625 = 5.25 TOMO MN staking reward with D = 50k deposited: 336 * 0.78125 = 262.5 TOMO Reward per year: \u00b6 MN infrastructure reward = 17520 * 1 = 17 520 TOMO For Voter with 1k voted = 17520 * 0.015625 = 273.75 TOMO MN staking reward with D = 50k deposited: 175 20 * 0.78125 = 13687.5 TOMO Total reward per MN with D = 50k deposited: 17 520 + 13 687.5 = 31208 TOMO Scenario 3: 150 Masternodes, 12.5 million token voting, a total of 20 million token locked. \u00b6 N = 150, X = 250, S_1 = S_2 = .. = S_{150} = 20 000 000 / 150 = 133 333 TOMO C_1 = C_2 = .. = C_{150} Therefore, R_1 = R_2 = .. = R_{150} = R = X/150 = 1.6667 TOMO Reward per epoch: \u00b6 MN infrastructure reward = 0.4 * 1.6667 = 0.6667 TOMO For Voter with 1k voted = (0.5 * 1.6667 * 1000) / 133 333 = 0.00625 TOMO MN staking reward with 50k deposited: 50 * 0.00625 = 0.3125 TOMO Reward per week: \u00b6 MN infrastructure reward = 336 * 0.6667 = 224 TOMO For Voter with 1k voted = 336 * 0.00625 = 2.1 TOMO MN staking reward with D = 50k deposited: 336 * 0.3125 = 105 TOMO Reward per year: \u00b6 MN infrastructure reward = 17520 * 0.6667 = 11 680 TOMO For Voter with 1k voted = 17520 * 0.00625 = 109.5 TOMO MN staking reward with D = 50k deposited: 175 20 * 0.3125 = 5475 TOMO Total reward per MN with D = 50k deposited: 11 680 + 5475 = 17155 TOMO","title":"Economics paper"},{"location":"wp-and-research/economics-paper/#tomochain-the-most-efficient-platform-for-the-token-economy","text":"","title":"TOMOCHAIN - The Most Efficient Platform for the Token Economy"},{"location":"wp-and-research/economics-paper/#preface","text":"","title":"Preface"},{"location":"wp-and-research/economics-paper/#tomochains-vision-and-mission","text":"Our mission is to be a leading force in building the Internet of Value, and its infrastructure. We are working to create an alternative, scalable financial system which is more secure, transparent, efficient, inclusive and equitable for everyone. TomoChain is an innovative solution to the scalability problem with the Ethereum blockchain, and other current blockchain platforms. TomoChain relies on a system of 150 Masternodes with Proof of Stake Voting (PoSV) consensus that can support near-zero fee, and 2-second transaction confirmation time. Security, stability and chain finality are guaranteed via novel techniques such as double validation, staking via smart-contracts and \"true\" randomization processes. TomoChain supports all EVM-compatible smart-contracts, protocols, and atomic cross-chain token transfers. New scaling techniques such as sharding, EVM parallelisation, private-chain generation, hardware integration will be continuously researched and incorporated into TomoChain's Masternode architecture which will be an ideal scalable smart-contract public blockchain for decentralized apps, token issuances and token integrations for small and big businesses.","title":"TomoChain's vision and mission"},{"location":"wp-and-research/economics-paper/#scope","text":"This document describes TomoChain\u2019s initial draft for the TomoChain blockchain\u2019s economics system.","title":"Scope"},{"location":"wp-and-research/economics-paper/#masternodes","text":"Masternodes are full-nodes that create, verify and validate new blocks in TomoChain\u2019s platform. Masternode Candidate : Any account can deposit 50K TOMO using the official on-chain governance d-app to become a Masternode Candidate. 50K TOMO deposit can earn staking rewards. A Candidate can resign, but the tokens will be locked for the next 30 days (1,296,000 blocks) after the resignation. Becoming a Masternode : A Candidate becomes a Masternode when he/she belongs to top 150 most voted Candidates in each epoch. A Masternode can resign, but the tokens will be locked for the next 30 days after the resignation. Reward : The reward a Masternode receives in each epoch is proportional to the number of signatures he/she signs.","title":"Masternodes"},{"location":"wp-and-research/economics-paper/#token-voting-and-staking","text":"Token voting : Token holders can vote for Masternode Candidates by sending TOMO to each Candidate specific voting address using the official governance d-app. Top 150 most voted Candidates will become Masternodes. Token holders can un-vote a Candidate, but the tokens will be locked for the next 48 hours (86,400 blocks) after the un-voting. Staking : Masternode token deposits, and all tokens used to vote for Masternodes will enter staking program, and earn block rewards in each epoch, plus any fees. Tokens used to vote for Candidates who do not become Masternodes will not earn staking reward.","title":"Token Voting and Staking"},{"location":"wp-and-research/economics-paper/#token-emission-schedule","text":"Following the fundraising commitment : The total amount of tokens at the genesis block is 55 million TOMO tokens in circulation; 12 millions are reserved for the team vested over the next 4 years; 16 millions are reserved for strategic partners, and an ecosystem building fund which totals 83 millions tokens. Plus, 17 millions are reserved as block rewards for the next 8 years, the amount of tokens in circulation at the end of the 8th year after the genesis block is around 100 million TOMO. After the mainnet: the block reward for the first and second year is 4 million TOMO annually; the block reward for the 3rd, 4th, 5th year is 2 millions TOMO annually ; and the block reward for the 6th, 7th and 8th year is 1 million TOMO annually . Subsequently, the block reward will be halted, or activated at a number less than or equal to 1 million TOMO annually. Implementation : Each epoch consists of 900 blocks, which will reward a total of 250 TOMO in the first two years. 250 TOMO will be divided to all the Masternodes proportional to the number of signatures they sign during the epoch. Afterward, the reward achieved by each Masternode will be divided into three portions. The first portion of 40% called \u201cInfrastructure Reward\u201d goes to the Masternode. The second portion of 50% called \u201cStaking Reward\u201d goes to the pool of all voters for that Masternode which is shared proportionally based on the token stake. The last portion of 10% called \u201cFoundation Reward\u201d goes to a special account controlled by the Masternode Foundation, which is run by TomoChain company initially.","title":"Token Emission Schedule"},{"location":"wp-and-research/economics-paper/#votingstaking-consideration","text":"","title":"Voting/Staking Consideration"},{"location":"wp-and-research/economics-paper/#candidatemasternode-incentives","text":"Masternodes will receive a significant amount of block rewards, which likely exceeds the cost for running the infrastructure. However, Masternodes need to invest in TomoChain by depositing at least 50K Tomo, and stake them for a long term. Furthermore, after depositing 50K TOMO to become a Candidate, if the account cannot become a Masternode (has less votes than Top 150 most voted Candidates), he/she will receive no rewards. Therefore, Candidates have an incentive to do as much as they can such as signaling their capability to support TomoChain to get into top 150 most voted Candidates.","title":"Candidate/Masternode incentives"},{"location":"wp-and-research/economics-paper/#token-voter-incentives","text":"Token voters should vote for Candidates who signal a strong support for TomoChain because if the Candidate does not become a Masternode, voters will not receive any rewards. However, token voters should also vote for the less voted Candidates because the most voted Candidates will receive less reward per token stake comparatively.","title":"Token voter incentives"},{"location":"wp-and-research/economics-paper/#long-term-platform-economics-consideration","text":"","title":"Long Term Platform Economics Consideration"},{"location":"wp-and-research/economics-paper/#pe-theory-of-token-value","text":"Equity price can often be a multiple of annual earnings a company generates. In the case of a blockchain platform, earnings could be considered as the total rewards and fees that the platform produces. The multiples for technology startups in the early days could exceed 200 which is where Ethereum network is approximately at the moment.","title":"P/E theory of token value"},{"location":"wp-and-research/economics-paper/#quantity-theory-of-money-for-token-value","text":"In this theory, the total amount of TOMO can be considered the money supply for the blockchain economy including all the d-apps and tokens on top of TomoChain. Assuming a constant price, and velocity of money, demand for money will raise proportionally to the total amount of activities of the whole blockchain network, which will raise the price of TOMO if the supply of Tomo is fixed, or the inflation rate is very small. TomoChain\u2019s advantages of minimal transaction fee, and very fast confirmation time could spur a massive amount of activities for Tomo tokens, and other tokens on top of TomoChain.","title":"Quantity theory of money for token value"},{"location":"wp-and-research/economics-paper/#store-of-value-theory-of-token-value","text":"Blockchain native tokens can be considered as the means of fundraising, or the store of value within their own blockchain economy if the supply of the token is fixed, or the inflation rate is very small, and predictable. These conditions are applying to Ether and Bitcoin at the moment, and can be applying to TOMO token in the future as the Tomochain\u2019s economy grows.","title":"Store of value theory of token value"},{"location":"wp-and-research/economics-paper/#built-in-decentralized-exchange","text":"TomoChain roadmap includes a built-in decentralized exchange, in which a portion of fees will be added to the pool of epoch rewards. These fees could be substantial if there are many valuable tokens on top of TomoChain. This extra feature can increase the future earnings of the network, and raise TOMO price based on the P/E theory.","title":"Built-in decentralized exchange"},{"location":"wp-and-research/economics-paper/#decentralized-governance","text":"","title":"Decentralized Governance"},{"location":"wp-and-research/economics-paper/#become-a-masternode","text":"Becoming a Masternode is an important signal of long-term support for TomoChain platform. We would welcome other entities to become a Masternode, to show their supports by helping the network, and gradually decentralize the platform governance.","title":"Become a Masternode"},{"location":"wp-and-research/economics-paper/#masternode-council","text":"It is postulated that TomoChain platform would later be coordinated by non-profit body such as Masternode Council (or Foundation) amongst many other decentralized bodies which receive a steady amount of income from the network, and act solely in the interest of the network.","title":"Masternode Council"},{"location":"wp-and-research/economics-paper/#technical-decision-making","text":"The technical decisions should be considered, debated, and decided upon by qualified experts based on the long-term interest of the network.","title":"Technical decision making"},{"location":"wp-and-research/economics-paper/#economic-decision-making","text":"The economic decisions such as the amount of block rewards, inflation rate, the division of block rewards might be based on the consensus of majority of the Masternodes (with their voters). Masternode Council could be one of the coordinating bodies for these activities using the official governance d-app.","title":"Economic decision making"},{"location":"wp-and-research/economics-paper/#appendix-a-history-of-the-project","text":"TomoChain PTE. LTD. raised funds to build TomoChain blockchain platform in early 2018. The ICO whitepaper is at https://goo.gl/avtnZ1. The terms of sale and other documents can be found at https://tomochain.com/exchanges TomoChain platform will be gradually decentralized in 2-8 years after the mainnet launch, and eventually become a secure public blockchain platform for everyone.","title":"Appendix A: History of the Project"},{"location":"wp-and-research/economics-paper/#appendix-b-reward-calculation-formula-and-details","text":"","title":"Appendix B: Reward Calculation Formula and Details"},{"location":"wp-and-research/economics-paper/#general-notations","text":"N: the current number of masternodes, maximum of N = 1..150 M_1 , M_2 , .., M_N : the set of masternodes in the current epoch C_1 , C_2 , .., C_N : the number of signatures a masternode has made S_1 , S_2 , .., S_N : the total amount of staked (including deposited and voted) TOMO for a masternode D_1 , D_2 , .., D_N : the amount of deposited TOMO by a masternode X: the total reward per epoch for all masternodes Total reward per masternode = Infrastructure reward + staking reward MN: stand for masternode Reward divided to Masternode M_i : R_i = \\frac{C_i*X}{\\sum_{i=1}^{N}C_i} Reward per epoch: Masternode infrastructure reward: 0.4 R_i Voter with 1k voted TOMO: \\frac{0.5R_i*1000}{S_i} Masternode staking reward: \\frac{0.5R_i*D_i}{S_i} Reward per week (48 * 7 = 336 epochs): Masternode infrastructure reward: 336 * 0.4 R_i Voter with 1k voted TOMO: 336 * \\frac{0.5R_i*1000}{S_i} Masternode staking reward: 336 * \\frac{0.5R_i*D_i}{S_i} Reward per year (48 * 365 = 17520 epochs): Masternode infrastructure: 17520 * 0.4 R_i Voter with 1k voted TOMO: 17520 * \\frac{0.5R_i*1000}{S_i} Masternode staking reward: 17520 * \\frac{0.5R_i*D_i}{S_i} Total reward for a masternode: 17520 * 0.4 R_i + 17520 * \\frac{0.5R_i*D_i}{S_i}","title":"General notations"},{"location":"wp-and-research/economics-paper/#applying-the-reward-calculation-formula-to-specific-scenarios","text":"Note that, for simplification of illustration: The total amount of staked TOMO for all masternodes is equal The signatures for all masternodes in the scenarios are equal With these assumptions, all masternodes receive the same divided reward (R) and the same infrastructure reward. Furthermore, the reward for Voters with 1k voted TOMO is equal regardless of which the amount is voted for.","title":"Applying the reward calculation formula to specific scenarios"},{"location":"wp-and-research/economics-paper/#scenario-1-50-masternodes-25-million-token-voting-a-total-of-5-million-token-locked","text":"N = 50, X = 250, S_1 = S_2 = .. = S_{50} = 5 000 000 / 50 = 100k TOMO C_1 = C_2 = .. = C_{50} Therefore, R_1 = R_2 = .. = R_{50} = R = X/50 = 5 TOMO","title":"Scenario 1: 50 Masternodes, 2.5 million token voting, a total of 5 million token locked."},{"location":"wp-and-research/economics-paper/#reward-per-epoch","text":"MN infrastructure reward = 0.4 * 5 = 2 TOMO For Voter with 1k voted = (0.5 * 5 * 1000) / 100k = 0.025 TOMO MN staking reward with 50k TOMO deposited: 50 * 0.025 = 1.25 TOMO","title":"Reward per epoch:"},{"location":"wp-and-research/economics-paper/#reward-per-week","text":"MN infrastructure reward = 336 * 2 = 672 TOMO For Voter with 1k voted = 336 * 0.025 = 8.4 TOMO MN staking reward with D = 50k TOMO deposited: 336 * 1.25 = 420 TOMO","title":"Reward per week:"},{"location":"wp-and-research/economics-paper/#reward-per-year","text":"MN infrastructure reward = 17520 * 2 = 35 040 TOMO For Voter with 1k voted = 17520 * 0.025 = 438 TOMO MN staking reward with 50k deposited: 17520 * 1.25 = 21900 TOMO Total reward per MN with D = 50k deposited: 35 040 + 21 900 = 56940 TOMO","title":"Reward per year:"},{"location":"wp-and-research/economics-paper/#scenario-2-100-masternodes-3-million-token-voting-a-total-of-8-million-token-locked","text":"N = 100, X = 250, S_1 = S_2 = .. = S_{100} = 8 000 000 / 100 = 80k TOMO C_1 = C_2 = .. = C_{100} Therefore, R_1 = R_2 = .. = R_{100} = R = X/100 = 2.5 TOMO","title":"Scenario 2: 100 Masternodes, 3 million token voting, a total of 8 million token locked."},{"location":"wp-and-research/economics-paper/#reward-per-epoch_1","text":"MN infrastructure reward = 0.4 * 2.5 = 1 TOMO For Voter with 1k voted = (0.5 * 2.5 * 1000) / 80k = 0.015625 MN staking reward with D = 50k deposited: 50 * 0.015625 = 0.78125 TOMO","title":"Reward per epoch:"},{"location":"wp-and-research/economics-paper/#reward-per-week_1","text":"MN infrastructure reward = 336 * 1 = 336 TOMO For Voter with 1k voted = 336 * 0.015625 = 5.25 TOMO MN staking reward with D = 50k deposited: 336 * 0.78125 = 262.5 TOMO","title":"Reward per week:"},{"location":"wp-and-research/economics-paper/#reward-per-year_1","text":"MN infrastructure reward = 17520 * 1 = 17 520 TOMO For Voter with 1k voted = 17520 * 0.015625 = 273.75 TOMO MN staking reward with D = 50k deposited: 175 20 * 0.78125 = 13687.5 TOMO Total reward per MN with D = 50k deposited: 17 520 + 13 687.5 = 31208 TOMO","title":"Reward per year:"},{"location":"wp-and-research/economics-paper/#scenario-3-150-masternodes-125-million-token-voting-a-total-of-20-million-token-locked","text":"N = 150, X = 250, S_1 = S_2 = .. = S_{150} = 20 000 000 / 150 = 133 333 TOMO C_1 = C_2 = .. = C_{150} Therefore, R_1 = R_2 = .. = R_{150} = R = X/150 = 1.6667 TOMO","title":"Scenario 3: 150 Masternodes, 12.5 million token voting, a total of 20 million token locked."},{"location":"wp-and-research/economics-paper/#reward-per-epoch_2","text":"MN infrastructure reward = 0.4 * 1.6667 = 0.6667 TOMO For Voter with 1k voted = (0.5 * 1.6667 * 1000) / 133 333 = 0.00625 TOMO MN staking reward with 50k deposited: 50 * 0.00625 = 0.3125 TOMO","title":"Reward per epoch:"},{"location":"wp-and-research/economics-paper/#reward-per-week_2","text":"MN infrastructure reward = 336 * 0.6667 = 224 TOMO For Voter with 1k voted = 336 * 0.00625 = 2.1 TOMO MN staking reward with D = 50k deposited: 336 * 0.3125 = 105 TOMO","title":"Reward per week:"},{"location":"wp-and-research/economics-paper/#reward-per-year_2","text":"MN infrastructure reward = 17520 * 0.6667 = 11 680 TOMO For Voter with 1k voted = 17520 * 0.00625 = 109.5 TOMO MN staking reward with D = 50k deposited: 175 20 * 0.3125 = 5475 TOMO Total reward per MN with D = 50k deposited: 11 680 + 5475 = 17155 TOMO","title":"Reward per year:"},{"location":"wp-and-research/sharding-paper/","text":"TomoChain Proposal for Decentralized Applications-Oriented Proof-of-Stake Sharding Architecture \u00b6 Preface \u00b6 TomoChain's vision and mission \u00b6 Our mission is to be a leading force in building the Internet of Value, and its infrastructure. We are working to create an alternative, scalable financial system which is more secure, transparent, efficient, inclusive and equitable for everyone. TomoChain is an innovative solution to the scalability problem with the Ethereum blockchain, and other current blockchain platforms. TomoChain relies on a system of 150 Masternodes with Proof of Stake Voting (PoSV) consensus that can support near-zero fee, and 2-second transaction confirmation time. Security, stability and chain finality are guaranteed via novel techniques such as double validation, staking via smart-contracts and \"true\" randomization processes. TomoChain supports all EVM-compatible smart-contracts, protocols, and atomic cross-chain token transfers. New scaling techniques such as sharding, EVM parallelisation, private-chain generation, hardware integration will be continuously researched and incorporated into TomoChain's Masternode architecture which will be an ideal scalable smart-contract public blockchain for decentralized apps, token issuances and token integrations for small and big businesses. Scope \u00b6 This document describes TomoChain\u2019s initial proposal for decentralized applications-oriented Proof-of-Stake Sharding Architecture. This preliminary draft is not our final design specification and it is subject to change. Comments are welcomed and appreciated. Abstract and Keywords \u00b6 Abstract \u00b6 This paper proposes a sharding architecture solution for the TomoChain public blockchain infrastructure. Besides the aims at significantly improving the transaction processing performance in the current TomoChain design with the Proof-of-Stake Voting (PoSV) consensus, the presented sharding is designed in order to support decentralized applications\u2019 performance. The solution uses PoSV for intra-shard consensus because PoSV provides two-second block-time and fast confirmation time. The paper identifies and solves cross-shard transactions for smart contract message calls chain and data availability problem in shard reshuffling. Specifically, we propose two cross-shard smart contract transaction schemes combined with a new smart contract deployment strategy that places dependent smart contracts onto the same shard. Moreover, we also address the data availability problem in state sharding when shard reshuffling takes place. In addition, to be able to provide security and safety for shards, we provide an incentive-driven mutual verification game that aims at offering fast transaction confirmation time and fast detection of a malicious behavior that creates fraudulent blocks. Masternodes of a shard that create a fraudulent block will be detected and penalized by losing all of their deposits to the node that detects the invalidity of the block. Keywords \u00b6 Sharding, Blockchain, Smart contract, TomoChain, cross-shard transactions, randomization, data availability,security, PoSV, consensus. Introduction \u00b6 Blockchain has become one of the most disruptive technologies that enable many decentralized applications, including but not limited to cryptocurrencies, smart contract, voting and supply chain management. Blockchain proponents have been trying to inject it into this Industry 4.0 revolution era. In order to reach this goal, the current blockchain infrastructure must at least be able to compete with many mainstream technologies, such as Visa and MasterCard processors in financial services. Nevertheless, the reality is disappointing these blockchain proponents: Bitcoin [1] and Ethereum [2] only can process around 7 and 15 transactions per second, respectively. Remember that, these numbers in Visa and MasterCard are around 5000-6000 transactions per seconds. Several scaling solutions have been proposed by the proponents, including on-chain and layer 2 scaling solutions. Off-chain scaling solutions are Lightning [3] network for Bitcoin, State Chanel [4] and Plasma [5] for Ethereum, just to name a few. Regarding on-chain scaling, Sharding and Proof-of-Stake-based consensus are of potential that can significantly improve transaction processing performance while trying to maintain security requirements of the system. Sharding challenges : Sharding is a technique that is inspired by the concept of database sharding in which the whole database is divided into sub-databases which will then be deployed on different servers. The goal is to parallelize the transaction processing by dividing the blockchain network into sub-networks each of which stores a portion of the whole blockchain and processes a subset of non-overlapping transactions. The application of sharding to decentralized blockchain systems has the following technical challenges that will be addressed in this paper: Assignment of masternodes to specific shards : This process is critical to ensure that masternodes are assigned to shards in a randomized manner to avoid an adaptive attack. In the latter, malicious masternodes can all join the same shard in order to collude it. Cross-shard transaction : Cross-shard transactions enable every account to transact with any other accounts. The challenge is how to execute cross-shard transactions securely and safely knowing that a cross-shard transaction involves more than two shards. Furthermore, the problem is even more challenging if the receiver is a smart contract. Cross-shard smart contract message calls chaining *: The problem of cross-shard transaction becomes very difficult if a smart contract in one shard calls another smart contract in another shard, which in turn invokes another contract in another shard. This cross-shard smart contract call chaining if not properly processed will be easy to attack and violate security requirements and harmful to the performance of the whole system. Shard reshuffling through randomization and data availability : The problem with state sharding is when the network reshuffles the set of masternodes for each shard after a period of time (often called epoch), the masternodes that switch from one shard to a new shard need to synchronize the current data of the new shard in order to execute new transactions for that shard. If not carefully treated, the data synchronization takes a significant amount of time and decreases the performance of the system. Previous works on sharding : Sharding has its origin from permissioned or closed distributed databases in which a centralized database is partitioned into smaller databases that store information related to a subset of users. The smaller databases are then maintained by trusted infrastructures provided by infrastructure providers such as Google or Amazon. However, the sharding in these closed distributed databases cannot be applied to public/permissionless blockchains in which one masternode does not have to trust in other masternodes in the Internet. Several blockchain-related works have been trying to propose a sharding solution that can leverage the transaction processing performance. In [6], Elastico is proposed as the first sharding solution for public blockchains. Elastico partitions the blockchain network into smaller committees, each of which then processes a disjoint set of transactions, called a shard. However, Elastico offers horizontal scaling but with high failure probabilities [12]. Zilliqa [7] inherits the sharding architecture solution from Elastico. Both Elastico and Zilliqa support network sharding and utilizes Practical Byzantine Fault Tolerance [8] as intra-shard consensus. In these approaches, micro blocks, which are created by the shards, are then aggregated into a final block by another consensus round run among the final committee members. OmniLedger [9] using the Unspent Transaction Output (UTXO) provides atomic cross-shard transactions. A common missing feature of these aforementioned approaches is the lack of smart contract support. If two transactions from the senders in different shards, which execute the same smart contract, would cause concurrent conflict updates in the different shards to the state of the same smart contract. In this paper, we propose a sharding architecture for TomoChain but can be applied to any Proof-of-Stake-based blockchain systems to address the aforementioned issues. Furthermore, to be able to provide security and safety for shards, we provide an incentive-driven mutual verification game that aims at offering fast transaction confirmation time and fast detection of a malicious behavior that creates fraudulent blocks. Masternodes of a shard that create a fraudulent block will be detected and penalized by losing all of their deposits to the node that detects the invalidity of the block. The remainder of this paper is structured as follows: Section II describes the sharding architecture and the consensus protocol of the solution addressing the previously mentioned problem. Section III provides our solutions to different cross-shard transaction schemes. Section IV presents an incentive-driven mutual game verification game for fast transaction confirmation time and fast detection and penalization of malicious behaviors of attacking maternodes for strengthening security and safety. Section V details the reshuffling and data availability problem and solution. Finally, we conclude the paper and show some perspectives in Section VI. Sharding Architecture \u00b6 This section describes the sharding architecture and the used consensus protocol. We assume readers of this paper have basic understanding of our Proof-of-Stake Voting (PoSV) consensus protocol previously released and presented in [10]. However, to better describe the sharding architecture, we summarize some important information about TomoChain\u2019s PoSV. Specifically, TomoChain features a voting-based system to elect 150 Masternodes that are responsible for creating, verifying and finalizing the blocks created within a period, called epoch, which lasts for 900 of two-second block-times. Each coin-holder must deposit at least 50 000 TOMO to a Voting smart contract and must satisfy a set of infrastructure requirements. The set of Masternodes is dynamically selected through votes made by coin-holders that send their tokens to the Voting smart contract. Sharding architecture overview \u00b6 Figure 1 shows the proposed sharding architecture. Without loss of generality, we suppose there are N masternodes that are selected among the candidates. The network of masternodes is assigned to specific shards using randomization sampling. This latter randomly divides the set of N masternodes into sub-groups of size c (either 10 or 15), namely the shard size, thus the total number of shards S in the network is N/c . This step is called network sharding. This step is repeated every epoch. Each shard also has an identifier numbered from 0 to ( S \u2013 1). Each shard/subgroup only stores a portion of the whole blockchain, instead of the whole blockchain as in existing blockchains such as Bitcoin and Ethereum. The processing of a transaction assigned to a specific shard is based on the address of the sender of the transaction. A transaction tx is assigned to shard id if and only if log_2(N) rightmost bits of the transaction sender\u2019s address is equal to id . That means, each external owned account is managed by a specific shard, based on its address. Therefore, simple double-spending attacks by sending transactions to different shards are avoided. For example, transactions from address 0xabc..def and 0xabc...ded are processed by shard 15 (16th shard) and 13 (14th shard), respectively, if the total number of shards N = 16. There is also a root chain that interacts with shard chains. The root chain is used for securing the transactions in the shard chains. The root chain does not store details of transactions assigned to shards, but block hashes and the smart contracts used for voting and block finalization. TomoChain features a Voting smart contract that is for masternode candidates and coin-holders to deposit and vote for masternodes, respectively. In the sharding architecture, this smart contract is deployed on the root chain. Coin-holders interact with the Voting smart contract in the current TomoChain as they interact with the root chain in the sharding architecture. Every vote and deposit are recorded in the root chain. The blocks in the root chain are created and verified by a larger number of masternodes than shard chains\u2019 for securing the whole system (see Consensus protocol for more detailed discussion). Ideally, all masternodes are responsible for the root chain, just as they are maintaining TomoChain in PoSV. An interesting point is that the set of masternodes for the root chain does not need to do computation for transactions of specific shards, but only for creating blocks containing transactions to the consensus smart contracts (see [11] for detailed discussion). That means, the computation throughput is much smaller than that of the current PoSV because most of transactions happen in the shard chains. All masternodes will be creating and verifying blocks in the root chain and a shard chain, but there is no slot of two-second within which a masternode must create blocks for both the root chain and a shard chain. This is because it is very hard for a masternode to create two blocks within 2s. It is worth noting that, in order for attackers to create another longer shard chain than an existing shard chain, the attackers need to successfully revert both the shard chain and the root chain, which are unlikely to happen since the root chain is secured by all masternodes. Shard assignment through randomization sampling \u00b6 As a reminder, masternodes in TomoChain in an epoch is selected at the end of the previous epoch and there is also a randomization process during the previous epoch in order to select block verifiers for double validation. The addresses of the set of masternodes for next epoch is recorded in the Voting smart contract in a decreasing order of total votes for them. Each masternode is identified by its deposit wallet address. The goal of the shard assignment is to divide the address-identified N masternodes into subsets of masternodes, each of which process a disjoint set of transactions. To do that, an additional randomization process is executed during the previous epoch for shard assignment. Figure 1: The proposed sharding architecture solution The shard assignment is realized through randomization sampling that executes a pseudo random number generator function with a random seed agreed between the masternodes. We utilize the decentralized randomization algorithm that was previously introduced in our TomoChain Proof-of-Stake Voting consensus. The shard assignment has the following steps: Randomization: This step follows our previously proposed decentralized lock-recovery randomization scheme to compute a random seed which is unpredictable and not biased by any masternode. Shard assignment computation: Based on a random seed, we generate N random numbers using a pseudo random number generator. The N numbers are used in a permutation algorithm for sampling S sets of c masternodes. Figure 1 shows an example of the result of the decentralized randomization sampling process. The shards are communicated with each other through a cross-shard communication scheme, which is presented in the next section. Each shard sends their created blocks, block hashes and block signatures to the root chain that stores them in the TomoChain block signer smart contract (see Section Consensus protocol for more information). Consensus protocol \u00b6 In PoSV, there are currently two consensus smart contracts deployed onto TomoChain: Voting smart contract: This contract allows coin-holders to deposit (to become a masternode candidate), to vote for masternodes, to resign from the candidates list, to un-vote for masternodes, and to withdraw voted and deposited tokens. Block signer smart contract: Once a masternode verifies a block, the masternode signs off the block and sends the signature to the block signer smart contract. In the sharding architecture, these two smart contracts are deployed onto the root chain. Since the latter is verified by many masternodes, the smart contracts are secured. Proof-of-Stake Voting (PoSV) consensus with double validation and randomization is run among the set of masternodes of a shard. As a reminder, PoSV provides fast block-time and confirmation time, and a double validation technique for security enhancement. A block in PoSV is verified by both block creator, which creates the block, and block verifier, which verifies the block before adding it to the blockchain (see [10] for more information about block creator and block verifier in double validation). Other masternodes will then check whether the block verifier signs off on the block. Each masternode verifies a block by sending its signature for the block to the block signer smart contract on the root chain. A block in a shard is confirmed if \u00be masternodes of that shard verifies and signs it off. The confirmation time for intra-shard transactions can be almost instant, just as what is provided by PoSV without sharding. The root chain does not need to do re-computation for verifying blocks created by shard chains. The root chain is secure since it is maintained by all masternodes in the network. A double-spending attack to a shard needs to revert both the shard chain and the root chain, which is unlikely to happen. There is a small probability that a shard is colluded, in which more than its \u00be masternodes are attackers that do an adaptive attack. These attackers can create invalid blocks to create, for example, money out of thin air. In order to deal with this issue, we provide a game theory incentive-driven approach that is similar to Plasma. This approach is presented in Section IV. Cross-shard Transaction Schemes \u00b6 Cross-shard transaction \u00b6 A cross-shard transaction involves sending some coins from a sender in one shard to a receiver in another shard. It enables any account in a shard to transact with any other account in other shards. Our Lock-Commit cross-shard transaction requires cross-shard communication and is processed in two steps as follows: Lock at sending shard: The transaction is first processed by the sender shard which decreases the balance of the sender account. At the end of this phase, a lock transaction receipt is generated which is signed by the masternode which produces the block containing the transaction. The receipt is only generated if the transaction has been finalized (A block is considered as \u201cfinalized\u201d meaning that it is irreversible and any attempt to modify it is refused by the network) by the shard (the block is verified and signed by \u00be the number of masternodes of the shard sending their signatures to the Block Signer smart contract on the root chain). It plays the role of a Proof-of-Acceptance which is then sent to the receiver shard for processing. The Proof-of-Acceptance consists of the transaction, the Merkle proof of the transaction in the block at the sender shard, and the finality proof of the block. Commitment at receiving shard: The leader of the receiver shard sends the Proof-of-Acceptance for the transaction at the lock phase to the receiver shard. This latter processes the proof as a transaction which might increase the balance of the receiver. An issue of this commitment phase is that the malicious masternodes in the receiver shard might ignore the commit transaction, thus leaving the whole transaction stuck (because the sender\u2019s balance is decreased while the receiver\u2019s balance is not increased). However, because masternodes take turns to create blocks in a round-robin manner following the PoSV consensus, the proof will eventually be added to a block created by an honest masternode, even though one or several malicious masternodes might ignore the proof transaction. This liveness property is discussed in details in our previous technical paper for PoSV consensus. Figure 2 shows an illustrative example of a smart contract call cross-shard transaction. One of the complications of this transaction scheme is how to refund the left gas after the execution of the smart contract at the receiver shard completes. The left gas should be returned back to the sender (User) of the transaction in the sender shard. With that being said, in order to completely confirm a smart contract call cross-shard transaction, one must wait until all these back-and-forth phases between these shards are confirmed one-by-one. Therefore, the transaction confirmation latency increases, which is not expected from user perspectives, despite the significant increase of transaction volume. To deal with this issue, we propose another cross-shard transaction scheme, namely transfer-first cross-shard transaction scheme (TFC). In this latter, instead of directly doing a smart contract call cross-shard transaction, the sender at one shard can: Send the expected amount to another external account that is managed by herself/himself at the receiver shard through a simple balance transfer. Note that, this latter still requires the Lock-Commit scheme to make simple balance transfer. However, Lock-Commit scheme for simple balance transfer does not involve the complexity of gas refund as for smart contracts. This is because the Lock-Commit scheme for cross-shard simple balance transfer will consume a fixed amount gas (the gas for two balance transfers or 2300*2 gas). Use the controlled external account to interact with all smart contracts in the receiver shard. All transactions started by this external account within the receiver shard will then be confirmed almost instantly as provided by the PoSV consensus. While this transfer-first cross-shard transaction scheme helps maintain the fast transaction confirmation property of PoSV, it raises another issue: a user must manage as many accounts as the number of shards in the system in order to be able to instantly interact with all smart contracts and decentralized applications deployed on all shards. In order to alleviate this complicated account management issue, we intend to integrate an account management layer into our TOMO wallet. This layer is to help users manage their accounts in different shards as a single account in the current TomoChain design. It brings transparency to users as they are interacting with a one-shard system. When a user wants to make a transaction, the wallet does as follows: The account management layer specifies the target shard ID, based on the address of the receiver of the transaction. If the receiver is an external owned account, a simple transfer transaction is created and broadcast to the masternodes network. If the receiver is a smart contract, the account management layer verifies whether the address A0 corresponding to the target shard has the expected amount of token for the transaction. If the balance is not sufficient, a transfer transaction from one of the accounts in other shards to the address A0. Then, the transaction to the smart contract is created and sent to the masternodes network. Figure 2: Smart contract call cross-shard transaction One issue with this cross-shard transaction scheme is that the transaction fee would be higher than the non-sharding blockchain system since any cross-shard transaction must pay an additional fee at the sender shard of the transaction for the Lock at sending shard phase. However, the issue can be alleviated if the scheme is implemented along with a near-zero fee transaction system such as TomoChain. Smart contract message calls chain \u00b6 A smart contract, executed within a shard, might call another smart contract managed by another shard in the middle of its execution. Many smart contracts can be involved in a smart contract message calls chain. This is a very challenging problem because the execution of a caller smart contract in a caller shard cannot suspend and wait for the completion and finality of the callee smart contract in a callee shard. If that is the case, both the caller and callee shards would be suspended, thus significantly decreasing the performance of the whole system. The problem might be more harmful if the smart contract message calls chain involves many shards. Let\u2019s illustrate this challenge by the example in Figure 3 with the corresponding solidity source code in Figure 4. Suppose a user sends a transaction to a smart contract SC1 in order to call method m1 of SC1. The execution of the latter in Shard1 executes the method m2 of Shard2, which in turn makes another message call to SC3 in Shard3. For simplification, we assume that the user\u2019s address is managed by Shard1. Otherwise, the user can use the TFC cross-shard transaction scheme presented previously. The TFC cross-shard transaction scheme previously presented in Cross-shard transaction is not applicable to the illustrative example. The reason is that, the method calls between smart contracts are not transactions, but message calls. Message calls are not directly written to the blockchain. Even if we can wisely consider message calls as transactions in this case, the message call m1 to m2 executed in Shard1 must wait for the message call in Shard2 to be confirmed, which in turns needs to wait for the message call in Shard3 to be confirmed. This wait-for-confirmation chain critically decreases the performance of the system since the operations of waiting shards are blocked. Figure 3: Smart contract message calls chain example Figure 4: Solidity example for smart contract message calls chain In order to deal with this problem, we propose to group all smart contracts in a message calls chain and deploy them onto the same shard. With that being said, for the illustrative example, the smart contracts SC1, SC2 and SC3 are all deployed onto the shard onto which SC3 is deployed. This is because SC3 is the first contract among the three to be deployed. By this way, any smart contract message calls chain transaction is always executed within one single shard. Therefore, the aforementioned problem is eliminated. There is one issue that this solution cannot deal with is when a contract A calls two independent contracts B and C, which are respectively previously placed onto different shards. We approach this issue by early detecting this problem through an off-chain smart contract analysis when the user wants to deploy this smart contract A to the network. Then, an exception is raised that does not allow to place A onto the network. Incentive-driven Mutual Verification Game for Safety and Security \u00b6 Sharding is usually considered when the system has many participating nodes. This is because higher number of nodes per shard decreases the probability that a shard is colluded meaning that invalid blocks created by a colluded shard can be finalized. In order to make sharding applicable to blockchain systems with smaller number of nodes per shard, i.e. 10 nodes per shard, while still maintaining its security, we propose to use a game theory incentive-driven mechanism which is currently utilized by Plasma. Concretely, a shard is monitored by one or multiple challengers. The latter can be either independent nodes or masternodes in the root chain. They act as full nodes and receive all transactions and blocks processed by the monitored shard and verify all of these blocks. If a processed transaction is detected as invalid, i.e. the transaction is mal-formed or creates money out of thin air, the challenger sends a proof-of-invalidation or fraud proof to the root chain. The incentive for the challenger is that if a transaction is successfully challenged, the challenger gets rewarded as the total deposited tokens of the masternodes that have validated the invalid block. In contrast, all of the masternodes that have verified the invalid block are penalized by losing all of their deposited tokens to the challenger. Note that, non-masternode challengers do not have to deposit any amount of tokens. There are two safety concerns about this incentive-driven approach: Motivation for challengers: Non-masternodes challengers are expected to actively monitor the network to get incentives for invalid blocks. However, in the long term, non-masternodes are only motivated for monitoring the network if there are occasional invalid blocks so that the non-masternodes challengers can compensate for the cost of operating and monitoring the network. If there are no invalid blocks for a long period, the challengers will eventually be discouraged for this monitoring task, thus leaving a safety issue for the attackers in a colluded shard to create invalid blocks. The latter then can be falsely finalized because all non-masternodes challengers turn off their monitoring task since they cannot pay operational costs for monitoring the network. Data availability: Data availability is a strict requirement for the challengers to be able to detect invalidity. Without data, it is impossible to claim fraud proofs. For example, when a new shard block is created, any challenger needs the shard block, the previous state of the shard chain, and the signatures of the attacker masternodes verifying the invalid block, in order to have enough evidence to penalize the attackers. Therefore, all attackers would choose to refuse to broadcast their created blocks to honest nodes. This is because if a shard is colluded, all of the attackers within that shard can finalize an invalid block without sending any block data to honest nodes. We tackle the two aforementioned concerns as follows: Masternode candidates can become challengers to monitor the network and get incentives if some masternodes verify an invalid block. These candidates have incentives to monitor the network to detect the malicious behavior since whether having monitored or not, they still have to pay operational and monitoring costs. Furthermore, monitoring the network is also one of the ways to show its performance for coin-holders to vote it to become a masternode. In addition, if a masternode candidate chooses to not receive shard blocks and later on it is elected as a masternode assigned to a shard, the elected masternode will not be able to verify or create any shard blocks, which in turn lowers its performance. Eventually, the elected masternode will be quickly voted out of the masternode list by the coin-holders. Shard blocks and masternodes\u2019 signatures produced by maternodes need to be propagated to the root chain in order to finalize the blocks. All masternodes then have chance of verifying the validity of the shard blocks to detect the malicious behavior and get incentives. We call this mechanism an incentive-driven mutual verification game. If one shard is colluded and an invalid block is produced by attackers, whether the attackers in the shard want to or not, they have to send the invalid block to the root chain to finalize. Exposing an invalid block to the root chain is extremely risky for the attackers to lose all of their deposits (note that, masternodes are not required to verify blocks submitted to the root chain (that makes computation throughput on the root chain significantly less than the shard chains\u2019). Masternodes can propagate the shard blocks submitted to the root chain to the masternode candidates or any challenger that will verify the validity of the shard blocks, which solves the data availability problem in this case). It is worth noting that, the attackers have no incentives to not propagate invalid blocks to the root chain. This is because, by doing so, the attackers have spent computation resources and operational costs for only locally postponing the transactions within one shard. Furthermore, the attackers will be voted out of the masternode list because of their low performance and these postponed transactions will then be processed by the same shard but with a different set of masternodes once network reshuffling has been executed. Fraud proofs : If a block with an invalid state transition is signed off and propagated throughout the network, any other participant who receives the block can submit a merkleized fraud proof to the Voting smart contract (note that, the Voting smart contract contains all deposits and voted tokens, therefore, the penalty for masternodes creating invalid blocks will be executed by a function within the contract. The penalty function is executed once a fraud proof for an invalid block is submitted by any nodes) on the root chain and the shard chain rejects the invalid block and is rolled back. Fraud proofs ensure that all state transitions are validated. Example fraud proofs are proof of transaction spendability (funds are available in the current shard), proof-of-state transition (including checking the signature for the ability a transaction can be validated and executed, proof of inclusion/exclusion across blocks, and deposit/withdrawal proofs). In order for this construction to have minimal proofs, though, all blocks must provide a commitment to a merkleized trie of the current state, a trie of outputs spent, a merkle tree of transactions, and a reference to the prior state being modified. The fraud proofs and the incentive-driven mutual verification game combined with double validation ensure that a coalition of participants is not able to create invalid blocks that can be finalized without getting penalized. This ensures that the challengers always have access to shard blocks, thus are able to prove (and therefore discourage) invalid state transitions in shard blocks. Compared to TrueBit and Plasma: TrueBit [11] and Plasma [5] both use an incentive-driven verification game approach to provide scalable and secure solutions. Similar to our argument on the incentives for challengers to observe the network, the authors of TrueBit argue that, if there is no chance of finding a bug in the blocks, challengers will likely refuse to continue the monitoring task. In order to motivate the challengers to actively observe the network, TrueBit proposes to provide \u201cforced errors\u201d. These errors are produced at random and unpredictable time. The main objective of blocks with forced errors is to incentivize the challengers and keep them motivated to secure the network. These blocks are special and the creators and validators of these blocks are not penalized. Plasma provides an \u201cexit\u201d mechanism that aims at resolving the data availability problem. Specifically, in Plasma, when a participant cannot access block data of a Plasma chain, the participant can move her asset/token from the Plasma chain to the root chain (or the parent Plasma chain) by executing the \u201cexit\u201d mechanism. The participant then needs to wait for an amount of time, i.e. 1 week, in order for other participants to submit a fraud proof if the exit execution is falsified. In order to maintain fast confirmation time as in the current TomoChain PoSV design and to have the shards\u2019 liveness, our approach is driven by an incentive and mutual verification game. The latter aims at providing both fast confirmation and detection of Byzantiness of a block. By utilizing the very strong incentivizing-penalizing incentive-driven mutual verification game, challengers are strongly encouraged to work hard in order to keep the system safe and secure and shard masternodes are discouraged to act maliciously. Reshuffling and Data Availability \u00b6 To enhance further the security of shards, it is very important that shards should be dynamic for resilience against attacks and failures of nodes in a shard. For example, one shard might be stuck in a situation where blocks are valid but cannot be finalized because attacking masternodes do not validate these blocks. A technique for dealing with this problem is to reshuffle the masternodes assigned to the shards. This means the set of masternodes for each shard is changed dynamically every epoch. At the end of each epoch, the randomization sampling is repeated for a different set of masternodes elected to participate into shards. Reshuffling enhances the security and resilience of the system. However, it introduces a new challenge: the data availability problem. In the latter, every masternode joining to a new shard must synchronize the blockchain portion of this new shard in order to be able to verify transactions belonging to it. If the portion is too large and the synchronization time is too short, the entire shard cannot verify any transaction, thus renders the shard useless for the whole synchronization time. This problem can be tackled by the following strategies:: Shard masternodes storing all states of other shards: It requires that all masternodes, even non-shard member nodes, must receive and store all of the portions of state in all shards. This solution allows for any masternodes to smoothly switch from one shard to or join any other shard without needing a data synchronization time. Gradual reshuffling: Instead of resampling the whole set of masternodes assigned to each shard at the end of each epoch, the reshuffling might only pull a subset of masternodes out of a shard while leaving the remainder intact, i.e. 1/10 of the masternodes are kicked out from a shard while the other masternodes still stay in the shard and the resampling takes c/10 (c is the shard size) masternodes randomly from the set of masternode candidates. Since the latter have been synchronizing all blocks (see Section IV for more information), the system can smoothly continue the operations without interrupting time for data synchronization. Randomization sampling in advance: Still using the strategy of giving masternodes joining new shards some amount of time to download the blockchain data of a shard, this approach lets the network execute the randomization sampling in the middle of an epoch. Therefore, assigned masternodes will know ahead of time to which shard they will contribute in the next epoch. In this fashion, these in-advance assigned masternodes will have enough time to download the blockchain data of the assigned shard to prepare for the next epoch. Currently, we have been leaning towards the first and second strategy because these solutions are more implementable and analyzable for security. These strategies will be rigorously analyzed before making a final decision since both have its own advantages and limitations. While the first strategy has advantage of simplicity and masternodes and candidates can switch from one shard to any other shard smoothly, the storage and network bandwidth of masternodes might be more needed. On the other hand, the second strategy can save more storage and network bandwidth, it raises a question: which masternodes should be kicked out of a shard if the performance of all masternodes in that shard is efficiently equal to each other\u2019s. Conclusion \u00b6 The paper has presented a new solution to sharding architecture for public blockchains. It aims at being transparent to users and significantly improving the transaction processing performance, while still maintaining basic security requirements of the system. The paper uniquely identified and solved cross-shard transactions for smart contract call chaining and data availability problem in shard reshuffling. The proposed solution uses the Proof-of-Stake Voting (PoSV) efficient consensus protocol proposed by Tomochain for intra-shard consensus. Specifically, we relied on our decentralized randomization algorithm for randomized shard assignment of masternodes and proposed two cross-shard smart contract transaction schemes combined with a new smart contract deployment strategy. The latter places dependent smart contracts onto the same shard, which eliminates smart contract message calls chain problem involving multiple shards. In order to ensure safety and security of shards, we proposed an incentive-driven mutual verification game. In this latter, masternodes that create and/or verify an invalid block are penalized by losing all of their deposits to any participant that detects the invalidity by providing fraud proofs. Moreover, we also discuss the data availability problem in state sharding when shard reshuffling takes place and propose several possible solutions. We are currently analyzing rigorously the safety and security properties of the proposed architecture to show its soundness. In future, once the analysis will have been done, we will implement the proposed architecture on top of the TomoChain blockchain. References \u00b6 [1] S. Nakamoto, \u201cBitcoin: A Peer-to-Peer Electronic Cash System,\u201d p. 9. [2] G. Wood, \u201cEthereum: a secure decentralised generalised transaction ledger,\u201d Ethereum Project Yellow Paper, pp. 1\u201332, 2014. [3] J. Poon and T. Dryja, \u201cThe Bitcoin Lightning Network:,\u201d p. 59. [4] P. Mccorry, S. Bakshi, I. Bentov, S. Meiklejohn, and A. Miller, \u201cPisa: Arbitration Outsourcing for State Channels.\u201d [5] J. Poon and V. Buterin, \u201cPlasma: Scalable Autonomous Smart Contracts,\u201d 2017. [6] L. Luu, V. Narayanan, C. Zheng, K. Baweja, S. Gilbert, and P. Saxena, \u201cA Secure Sharding Protocol For Open Blockchains,\u201d in Proceedings of the 2016 ACM SIGSAC Conference on Computer and Communications Security - CCS\u201916, 2016, pp. 17\u201330. [7] P. Barrett, \u201cZilliqa Technical Whitepaper,\u201d Zilliqa, pp. 1\u20138, 2017. [8] M. Castro, M. Castro, B. Liskov, and B. Liskov, \u201cPractical Byzantine fault tolerance,\u201d OSDI {\u2019}99: Proceedings of the third symposium on Operating systems design and implementation, no. February, pp. 173\u2013186, 1999. [9] E. Kokoris-Kogias, P. Jovanovic, L. Gasser, N. Gailly, and E. Syta, \u201cOmniLedger: A Secure, Scale-Out, Decentralized Ledger via Sharding,\u201d IEEE Symposium on Security & Privacy, 2018. [10] Tomochain R&D Team, \u201cTomochain: Masternodes Design Technical White Paper Version 1.0,\u201d Technical White Paper, 2018. [11] J. Teutsch and C. Reitwie\u00dfner, \u201cA scalable veri\ufb01cation solution for blockchains,\u201d p. 50, 2017. [12] Kokoris-Kogias, E., Jovanovic, P., Gasser, L., Gailly, N., Syta, E., & Ford, B. (2018, May). Omniledger: A secure, scale-out, decentralized ledger via sharding. In 2018 IEEE Symposium on Security and Privacy (SP) (pp. 583-598). IEEE.","title":"Sharding design paper"},{"location":"wp-and-research/sharding-paper/#tomochain-proposal-for-decentralized-applications-oriented-proof-of-stake-sharding-architecture","text":"","title":"TomoChain Proposal for Decentralized Applications-Oriented Proof-of-Stake Sharding Architecture"},{"location":"wp-and-research/sharding-paper/#preface","text":"","title":"Preface"},{"location":"wp-and-research/sharding-paper/#tomochains-vision-and-mission","text":"Our mission is to be a leading force in building the Internet of Value, and its infrastructure. We are working to create an alternative, scalable financial system which is more secure, transparent, efficient, inclusive and equitable for everyone. TomoChain is an innovative solution to the scalability problem with the Ethereum blockchain, and other current blockchain platforms. TomoChain relies on a system of 150 Masternodes with Proof of Stake Voting (PoSV) consensus that can support near-zero fee, and 2-second transaction confirmation time. Security, stability and chain finality are guaranteed via novel techniques such as double validation, staking via smart-contracts and \"true\" randomization processes. TomoChain supports all EVM-compatible smart-contracts, protocols, and atomic cross-chain token transfers. New scaling techniques such as sharding, EVM parallelisation, private-chain generation, hardware integration will be continuously researched and incorporated into TomoChain's Masternode architecture which will be an ideal scalable smart-contract public blockchain for decentralized apps, token issuances and token integrations for small and big businesses.","title":"TomoChain's vision and mission"},{"location":"wp-and-research/sharding-paper/#scope","text":"This document describes TomoChain\u2019s initial proposal for decentralized applications-oriented Proof-of-Stake Sharding Architecture. This preliminary draft is not our final design specification and it is subject to change. Comments are welcomed and appreciated.","title":"Scope"},{"location":"wp-and-research/sharding-paper/#abstract-and-keywords","text":"","title":"Abstract and Keywords"},{"location":"wp-and-research/sharding-paper/#abstract","text":"This paper proposes a sharding architecture solution for the TomoChain public blockchain infrastructure. Besides the aims at significantly improving the transaction processing performance in the current TomoChain design with the Proof-of-Stake Voting (PoSV) consensus, the presented sharding is designed in order to support decentralized applications\u2019 performance. The solution uses PoSV for intra-shard consensus because PoSV provides two-second block-time and fast confirmation time. The paper identifies and solves cross-shard transactions for smart contract message calls chain and data availability problem in shard reshuffling. Specifically, we propose two cross-shard smart contract transaction schemes combined with a new smart contract deployment strategy that places dependent smart contracts onto the same shard. Moreover, we also address the data availability problem in state sharding when shard reshuffling takes place. In addition, to be able to provide security and safety for shards, we provide an incentive-driven mutual verification game that aims at offering fast transaction confirmation time and fast detection of a malicious behavior that creates fraudulent blocks. Masternodes of a shard that create a fraudulent block will be detected and penalized by losing all of their deposits to the node that detects the invalidity of the block.","title":"Abstract"},{"location":"wp-and-research/sharding-paper/#keywords","text":"Sharding, Blockchain, Smart contract, TomoChain, cross-shard transactions, randomization, data availability,security, PoSV, consensus.","title":"Keywords"},{"location":"wp-and-research/sharding-paper/#introduction","text":"Blockchain has become one of the most disruptive technologies that enable many decentralized applications, including but not limited to cryptocurrencies, smart contract, voting and supply chain management. Blockchain proponents have been trying to inject it into this Industry 4.0 revolution era. In order to reach this goal, the current blockchain infrastructure must at least be able to compete with many mainstream technologies, such as Visa and MasterCard processors in financial services. Nevertheless, the reality is disappointing these blockchain proponents: Bitcoin [1] and Ethereum [2] only can process around 7 and 15 transactions per second, respectively. Remember that, these numbers in Visa and MasterCard are around 5000-6000 transactions per seconds. Several scaling solutions have been proposed by the proponents, including on-chain and layer 2 scaling solutions. Off-chain scaling solutions are Lightning [3] network for Bitcoin, State Chanel [4] and Plasma [5] for Ethereum, just to name a few. Regarding on-chain scaling, Sharding and Proof-of-Stake-based consensus are of potential that can significantly improve transaction processing performance while trying to maintain security requirements of the system. Sharding challenges : Sharding is a technique that is inspired by the concept of database sharding in which the whole database is divided into sub-databases which will then be deployed on different servers. The goal is to parallelize the transaction processing by dividing the blockchain network into sub-networks each of which stores a portion of the whole blockchain and processes a subset of non-overlapping transactions. The application of sharding to decentralized blockchain systems has the following technical challenges that will be addressed in this paper: Assignment of masternodes to specific shards : This process is critical to ensure that masternodes are assigned to shards in a randomized manner to avoid an adaptive attack. In the latter, malicious masternodes can all join the same shard in order to collude it. Cross-shard transaction : Cross-shard transactions enable every account to transact with any other accounts. The challenge is how to execute cross-shard transactions securely and safely knowing that a cross-shard transaction involves more than two shards. Furthermore, the problem is even more challenging if the receiver is a smart contract. Cross-shard smart contract message calls chaining *: The problem of cross-shard transaction becomes very difficult if a smart contract in one shard calls another smart contract in another shard, which in turn invokes another contract in another shard. This cross-shard smart contract call chaining if not properly processed will be easy to attack and violate security requirements and harmful to the performance of the whole system. Shard reshuffling through randomization and data availability : The problem with state sharding is when the network reshuffles the set of masternodes for each shard after a period of time (often called epoch), the masternodes that switch from one shard to a new shard need to synchronize the current data of the new shard in order to execute new transactions for that shard. If not carefully treated, the data synchronization takes a significant amount of time and decreases the performance of the system. Previous works on sharding : Sharding has its origin from permissioned or closed distributed databases in which a centralized database is partitioned into smaller databases that store information related to a subset of users. The smaller databases are then maintained by trusted infrastructures provided by infrastructure providers such as Google or Amazon. However, the sharding in these closed distributed databases cannot be applied to public/permissionless blockchains in which one masternode does not have to trust in other masternodes in the Internet. Several blockchain-related works have been trying to propose a sharding solution that can leverage the transaction processing performance. In [6], Elastico is proposed as the first sharding solution for public blockchains. Elastico partitions the blockchain network into smaller committees, each of which then processes a disjoint set of transactions, called a shard. However, Elastico offers horizontal scaling but with high failure probabilities [12]. Zilliqa [7] inherits the sharding architecture solution from Elastico. Both Elastico and Zilliqa support network sharding and utilizes Practical Byzantine Fault Tolerance [8] as intra-shard consensus. In these approaches, micro blocks, which are created by the shards, are then aggregated into a final block by another consensus round run among the final committee members. OmniLedger [9] using the Unspent Transaction Output (UTXO) provides atomic cross-shard transactions. A common missing feature of these aforementioned approaches is the lack of smart contract support. If two transactions from the senders in different shards, which execute the same smart contract, would cause concurrent conflict updates in the different shards to the state of the same smart contract. In this paper, we propose a sharding architecture for TomoChain but can be applied to any Proof-of-Stake-based blockchain systems to address the aforementioned issues. Furthermore, to be able to provide security and safety for shards, we provide an incentive-driven mutual verification game that aims at offering fast transaction confirmation time and fast detection of a malicious behavior that creates fraudulent blocks. Masternodes of a shard that create a fraudulent block will be detected and penalized by losing all of their deposits to the node that detects the invalidity of the block. The remainder of this paper is structured as follows: Section II describes the sharding architecture and the consensus protocol of the solution addressing the previously mentioned problem. Section III provides our solutions to different cross-shard transaction schemes. Section IV presents an incentive-driven mutual game verification game for fast transaction confirmation time and fast detection and penalization of malicious behaviors of attacking maternodes for strengthening security and safety. Section V details the reshuffling and data availability problem and solution. Finally, we conclude the paper and show some perspectives in Section VI.","title":"Introduction"},{"location":"wp-and-research/sharding-paper/#sharding-architecture","text":"This section describes the sharding architecture and the used consensus protocol. We assume readers of this paper have basic understanding of our Proof-of-Stake Voting (PoSV) consensus protocol previously released and presented in [10]. However, to better describe the sharding architecture, we summarize some important information about TomoChain\u2019s PoSV. Specifically, TomoChain features a voting-based system to elect 150 Masternodes that are responsible for creating, verifying and finalizing the blocks created within a period, called epoch, which lasts for 900 of two-second block-times. Each coin-holder must deposit at least 50 000 TOMO to a Voting smart contract and must satisfy a set of infrastructure requirements. The set of Masternodes is dynamically selected through votes made by coin-holders that send their tokens to the Voting smart contract.","title":"Sharding Architecture"},{"location":"wp-and-research/sharding-paper/#sharding-architecture-overview","text":"Figure 1 shows the proposed sharding architecture. Without loss of generality, we suppose there are N masternodes that are selected among the candidates. The network of masternodes is assigned to specific shards using randomization sampling. This latter randomly divides the set of N masternodes into sub-groups of size c (either 10 or 15), namely the shard size, thus the total number of shards S in the network is N/c . This step is called network sharding. This step is repeated every epoch. Each shard also has an identifier numbered from 0 to ( S \u2013 1). Each shard/subgroup only stores a portion of the whole blockchain, instead of the whole blockchain as in existing blockchains such as Bitcoin and Ethereum. The processing of a transaction assigned to a specific shard is based on the address of the sender of the transaction. A transaction tx is assigned to shard id if and only if log_2(N) rightmost bits of the transaction sender\u2019s address is equal to id . That means, each external owned account is managed by a specific shard, based on its address. Therefore, simple double-spending attacks by sending transactions to different shards are avoided. For example, transactions from address 0xabc..def and 0xabc...ded are processed by shard 15 (16th shard) and 13 (14th shard), respectively, if the total number of shards N = 16. There is also a root chain that interacts with shard chains. The root chain is used for securing the transactions in the shard chains. The root chain does not store details of transactions assigned to shards, but block hashes and the smart contracts used for voting and block finalization. TomoChain features a Voting smart contract that is for masternode candidates and coin-holders to deposit and vote for masternodes, respectively. In the sharding architecture, this smart contract is deployed on the root chain. Coin-holders interact with the Voting smart contract in the current TomoChain as they interact with the root chain in the sharding architecture. Every vote and deposit are recorded in the root chain. The blocks in the root chain are created and verified by a larger number of masternodes than shard chains\u2019 for securing the whole system (see Consensus protocol for more detailed discussion). Ideally, all masternodes are responsible for the root chain, just as they are maintaining TomoChain in PoSV. An interesting point is that the set of masternodes for the root chain does not need to do computation for transactions of specific shards, but only for creating blocks containing transactions to the consensus smart contracts (see [11] for detailed discussion). That means, the computation throughput is much smaller than that of the current PoSV because most of transactions happen in the shard chains. All masternodes will be creating and verifying blocks in the root chain and a shard chain, but there is no slot of two-second within which a masternode must create blocks for both the root chain and a shard chain. This is because it is very hard for a masternode to create two blocks within 2s. It is worth noting that, in order for attackers to create another longer shard chain than an existing shard chain, the attackers need to successfully revert both the shard chain and the root chain, which are unlikely to happen since the root chain is secured by all masternodes.","title":"Sharding architecture overview"},{"location":"wp-and-research/sharding-paper/#shard-assignment-through-randomization-sampling","text":"As a reminder, masternodes in TomoChain in an epoch is selected at the end of the previous epoch and there is also a randomization process during the previous epoch in order to select block verifiers for double validation. The addresses of the set of masternodes for next epoch is recorded in the Voting smart contract in a decreasing order of total votes for them. Each masternode is identified by its deposit wallet address. The goal of the shard assignment is to divide the address-identified N masternodes into subsets of masternodes, each of which process a disjoint set of transactions. To do that, an additional randomization process is executed during the previous epoch for shard assignment. Figure 1: The proposed sharding architecture solution The shard assignment is realized through randomization sampling that executes a pseudo random number generator function with a random seed agreed between the masternodes. We utilize the decentralized randomization algorithm that was previously introduced in our TomoChain Proof-of-Stake Voting consensus. The shard assignment has the following steps: Randomization: This step follows our previously proposed decentralized lock-recovery randomization scheme to compute a random seed which is unpredictable and not biased by any masternode. Shard assignment computation: Based on a random seed, we generate N random numbers using a pseudo random number generator. The N numbers are used in a permutation algorithm for sampling S sets of c masternodes. Figure 1 shows an example of the result of the decentralized randomization sampling process. The shards are communicated with each other through a cross-shard communication scheme, which is presented in the next section. Each shard sends their created blocks, block hashes and block signatures to the root chain that stores them in the TomoChain block signer smart contract (see Section Consensus protocol for more information).","title":"Shard assignment through randomization sampling"},{"location":"wp-and-research/sharding-paper/#consensus-protocol","text":"In PoSV, there are currently two consensus smart contracts deployed onto TomoChain: Voting smart contract: This contract allows coin-holders to deposit (to become a masternode candidate), to vote for masternodes, to resign from the candidates list, to un-vote for masternodes, and to withdraw voted and deposited tokens. Block signer smart contract: Once a masternode verifies a block, the masternode signs off the block and sends the signature to the block signer smart contract. In the sharding architecture, these two smart contracts are deployed onto the root chain. Since the latter is verified by many masternodes, the smart contracts are secured. Proof-of-Stake Voting (PoSV) consensus with double validation and randomization is run among the set of masternodes of a shard. As a reminder, PoSV provides fast block-time and confirmation time, and a double validation technique for security enhancement. A block in PoSV is verified by both block creator, which creates the block, and block verifier, which verifies the block before adding it to the blockchain (see [10] for more information about block creator and block verifier in double validation). Other masternodes will then check whether the block verifier signs off on the block. Each masternode verifies a block by sending its signature for the block to the block signer smart contract on the root chain. A block in a shard is confirmed if \u00be masternodes of that shard verifies and signs it off. The confirmation time for intra-shard transactions can be almost instant, just as what is provided by PoSV without sharding. The root chain does not need to do re-computation for verifying blocks created by shard chains. The root chain is secure since it is maintained by all masternodes in the network. A double-spending attack to a shard needs to revert both the shard chain and the root chain, which is unlikely to happen. There is a small probability that a shard is colluded, in which more than its \u00be masternodes are attackers that do an adaptive attack. These attackers can create invalid blocks to create, for example, money out of thin air. In order to deal with this issue, we provide a game theory incentive-driven approach that is similar to Plasma. This approach is presented in Section IV.","title":"Consensus protocol"},{"location":"wp-and-research/sharding-paper/#cross-shard-transaction-schemes","text":"","title":"Cross-shard Transaction Schemes"},{"location":"wp-and-research/sharding-paper/#cross-shard-transaction","text":"A cross-shard transaction involves sending some coins from a sender in one shard to a receiver in another shard. It enables any account in a shard to transact with any other account in other shards. Our Lock-Commit cross-shard transaction requires cross-shard communication and is processed in two steps as follows: Lock at sending shard: The transaction is first processed by the sender shard which decreases the balance of the sender account. At the end of this phase, a lock transaction receipt is generated which is signed by the masternode which produces the block containing the transaction. The receipt is only generated if the transaction has been finalized (A block is considered as \u201cfinalized\u201d meaning that it is irreversible and any attempt to modify it is refused by the network) by the shard (the block is verified and signed by \u00be the number of masternodes of the shard sending their signatures to the Block Signer smart contract on the root chain). It plays the role of a Proof-of-Acceptance which is then sent to the receiver shard for processing. The Proof-of-Acceptance consists of the transaction, the Merkle proof of the transaction in the block at the sender shard, and the finality proof of the block. Commitment at receiving shard: The leader of the receiver shard sends the Proof-of-Acceptance for the transaction at the lock phase to the receiver shard. This latter processes the proof as a transaction which might increase the balance of the receiver. An issue of this commitment phase is that the malicious masternodes in the receiver shard might ignore the commit transaction, thus leaving the whole transaction stuck (because the sender\u2019s balance is decreased while the receiver\u2019s balance is not increased). However, because masternodes take turns to create blocks in a round-robin manner following the PoSV consensus, the proof will eventually be added to a block created by an honest masternode, even though one or several malicious masternodes might ignore the proof transaction. This liveness property is discussed in details in our previous technical paper for PoSV consensus. Figure 2 shows an illustrative example of a smart contract call cross-shard transaction. One of the complications of this transaction scheme is how to refund the left gas after the execution of the smart contract at the receiver shard completes. The left gas should be returned back to the sender (User) of the transaction in the sender shard. With that being said, in order to completely confirm a smart contract call cross-shard transaction, one must wait until all these back-and-forth phases between these shards are confirmed one-by-one. Therefore, the transaction confirmation latency increases, which is not expected from user perspectives, despite the significant increase of transaction volume. To deal with this issue, we propose another cross-shard transaction scheme, namely transfer-first cross-shard transaction scheme (TFC). In this latter, instead of directly doing a smart contract call cross-shard transaction, the sender at one shard can: Send the expected amount to another external account that is managed by herself/himself at the receiver shard through a simple balance transfer. Note that, this latter still requires the Lock-Commit scheme to make simple balance transfer. However, Lock-Commit scheme for simple balance transfer does not involve the complexity of gas refund as for smart contracts. This is because the Lock-Commit scheme for cross-shard simple balance transfer will consume a fixed amount gas (the gas for two balance transfers or 2300*2 gas). Use the controlled external account to interact with all smart contracts in the receiver shard. All transactions started by this external account within the receiver shard will then be confirmed almost instantly as provided by the PoSV consensus. While this transfer-first cross-shard transaction scheme helps maintain the fast transaction confirmation property of PoSV, it raises another issue: a user must manage as many accounts as the number of shards in the system in order to be able to instantly interact with all smart contracts and decentralized applications deployed on all shards. In order to alleviate this complicated account management issue, we intend to integrate an account management layer into our TOMO wallet. This layer is to help users manage their accounts in different shards as a single account in the current TomoChain design. It brings transparency to users as they are interacting with a one-shard system. When a user wants to make a transaction, the wallet does as follows: The account management layer specifies the target shard ID, based on the address of the receiver of the transaction. If the receiver is an external owned account, a simple transfer transaction is created and broadcast to the masternodes network. If the receiver is a smart contract, the account management layer verifies whether the address A0 corresponding to the target shard has the expected amount of token for the transaction. If the balance is not sufficient, a transfer transaction from one of the accounts in other shards to the address A0. Then, the transaction to the smart contract is created and sent to the masternodes network. Figure 2: Smart contract call cross-shard transaction One issue with this cross-shard transaction scheme is that the transaction fee would be higher than the non-sharding blockchain system since any cross-shard transaction must pay an additional fee at the sender shard of the transaction for the Lock at sending shard phase. However, the issue can be alleviated if the scheme is implemented along with a near-zero fee transaction system such as TomoChain.","title":"Cross-shard transaction"},{"location":"wp-and-research/sharding-paper/#smart-contract-message-calls-chain","text":"A smart contract, executed within a shard, might call another smart contract managed by another shard in the middle of its execution. Many smart contracts can be involved in a smart contract message calls chain. This is a very challenging problem because the execution of a caller smart contract in a caller shard cannot suspend and wait for the completion and finality of the callee smart contract in a callee shard. If that is the case, both the caller and callee shards would be suspended, thus significantly decreasing the performance of the whole system. The problem might be more harmful if the smart contract message calls chain involves many shards. Let\u2019s illustrate this challenge by the example in Figure 3 with the corresponding solidity source code in Figure 4. Suppose a user sends a transaction to a smart contract SC1 in order to call method m1 of SC1. The execution of the latter in Shard1 executes the method m2 of Shard2, which in turn makes another message call to SC3 in Shard3. For simplification, we assume that the user\u2019s address is managed by Shard1. Otherwise, the user can use the TFC cross-shard transaction scheme presented previously. The TFC cross-shard transaction scheme previously presented in Cross-shard transaction is not applicable to the illustrative example. The reason is that, the method calls between smart contracts are not transactions, but message calls. Message calls are not directly written to the blockchain. Even if we can wisely consider message calls as transactions in this case, the message call m1 to m2 executed in Shard1 must wait for the message call in Shard2 to be confirmed, which in turns needs to wait for the message call in Shard3 to be confirmed. This wait-for-confirmation chain critically decreases the performance of the system since the operations of waiting shards are blocked. Figure 3: Smart contract message calls chain example Figure 4: Solidity example for smart contract message calls chain In order to deal with this problem, we propose to group all smart contracts in a message calls chain and deploy them onto the same shard. With that being said, for the illustrative example, the smart contracts SC1, SC2 and SC3 are all deployed onto the shard onto which SC3 is deployed. This is because SC3 is the first contract among the three to be deployed. By this way, any smart contract message calls chain transaction is always executed within one single shard. Therefore, the aforementioned problem is eliminated. There is one issue that this solution cannot deal with is when a contract A calls two independent contracts B and C, which are respectively previously placed onto different shards. We approach this issue by early detecting this problem through an off-chain smart contract analysis when the user wants to deploy this smart contract A to the network. Then, an exception is raised that does not allow to place A onto the network.","title":"Smart contract message calls chain"},{"location":"wp-and-research/sharding-paper/#incentive-driven-mutual-verification-game-for-safety-and-security","text":"Sharding is usually considered when the system has many participating nodes. This is because higher number of nodes per shard decreases the probability that a shard is colluded meaning that invalid blocks created by a colluded shard can be finalized. In order to make sharding applicable to blockchain systems with smaller number of nodes per shard, i.e. 10 nodes per shard, while still maintaining its security, we propose to use a game theory incentive-driven mechanism which is currently utilized by Plasma. Concretely, a shard is monitored by one or multiple challengers. The latter can be either independent nodes or masternodes in the root chain. They act as full nodes and receive all transactions and blocks processed by the monitored shard and verify all of these blocks. If a processed transaction is detected as invalid, i.e. the transaction is mal-formed or creates money out of thin air, the challenger sends a proof-of-invalidation or fraud proof to the root chain. The incentive for the challenger is that if a transaction is successfully challenged, the challenger gets rewarded as the total deposited tokens of the masternodes that have validated the invalid block. In contrast, all of the masternodes that have verified the invalid block are penalized by losing all of their deposited tokens to the challenger. Note that, non-masternode challengers do not have to deposit any amount of tokens. There are two safety concerns about this incentive-driven approach: Motivation for challengers: Non-masternodes challengers are expected to actively monitor the network to get incentives for invalid blocks. However, in the long term, non-masternodes are only motivated for monitoring the network if there are occasional invalid blocks so that the non-masternodes challengers can compensate for the cost of operating and monitoring the network. If there are no invalid blocks for a long period, the challengers will eventually be discouraged for this monitoring task, thus leaving a safety issue for the attackers in a colluded shard to create invalid blocks. The latter then can be falsely finalized because all non-masternodes challengers turn off their monitoring task since they cannot pay operational costs for monitoring the network. Data availability: Data availability is a strict requirement for the challengers to be able to detect invalidity. Without data, it is impossible to claim fraud proofs. For example, when a new shard block is created, any challenger needs the shard block, the previous state of the shard chain, and the signatures of the attacker masternodes verifying the invalid block, in order to have enough evidence to penalize the attackers. Therefore, all attackers would choose to refuse to broadcast their created blocks to honest nodes. This is because if a shard is colluded, all of the attackers within that shard can finalize an invalid block without sending any block data to honest nodes. We tackle the two aforementioned concerns as follows: Masternode candidates can become challengers to monitor the network and get incentives if some masternodes verify an invalid block. These candidates have incentives to monitor the network to detect the malicious behavior since whether having monitored or not, they still have to pay operational and monitoring costs. Furthermore, monitoring the network is also one of the ways to show its performance for coin-holders to vote it to become a masternode. In addition, if a masternode candidate chooses to not receive shard blocks and later on it is elected as a masternode assigned to a shard, the elected masternode will not be able to verify or create any shard blocks, which in turn lowers its performance. Eventually, the elected masternode will be quickly voted out of the masternode list by the coin-holders. Shard blocks and masternodes\u2019 signatures produced by maternodes need to be propagated to the root chain in order to finalize the blocks. All masternodes then have chance of verifying the validity of the shard blocks to detect the malicious behavior and get incentives. We call this mechanism an incentive-driven mutual verification game. If one shard is colluded and an invalid block is produced by attackers, whether the attackers in the shard want to or not, they have to send the invalid block to the root chain to finalize. Exposing an invalid block to the root chain is extremely risky for the attackers to lose all of their deposits (note that, masternodes are not required to verify blocks submitted to the root chain (that makes computation throughput on the root chain significantly less than the shard chains\u2019). Masternodes can propagate the shard blocks submitted to the root chain to the masternode candidates or any challenger that will verify the validity of the shard blocks, which solves the data availability problem in this case). It is worth noting that, the attackers have no incentives to not propagate invalid blocks to the root chain. This is because, by doing so, the attackers have spent computation resources and operational costs for only locally postponing the transactions within one shard. Furthermore, the attackers will be voted out of the masternode list because of their low performance and these postponed transactions will then be processed by the same shard but with a different set of masternodes once network reshuffling has been executed. Fraud proofs : If a block with an invalid state transition is signed off and propagated throughout the network, any other participant who receives the block can submit a merkleized fraud proof to the Voting smart contract (note that, the Voting smart contract contains all deposits and voted tokens, therefore, the penalty for masternodes creating invalid blocks will be executed by a function within the contract. The penalty function is executed once a fraud proof for an invalid block is submitted by any nodes) on the root chain and the shard chain rejects the invalid block and is rolled back. Fraud proofs ensure that all state transitions are validated. Example fraud proofs are proof of transaction spendability (funds are available in the current shard), proof-of-state transition (including checking the signature for the ability a transaction can be validated and executed, proof of inclusion/exclusion across blocks, and deposit/withdrawal proofs). In order for this construction to have minimal proofs, though, all blocks must provide a commitment to a merkleized trie of the current state, a trie of outputs spent, a merkle tree of transactions, and a reference to the prior state being modified. The fraud proofs and the incentive-driven mutual verification game combined with double validation ensure that a coalition of participants is not able to create invalid blocks that can be finalized without getting penalized. This ensures that the challengers always have access to shard blocks, thus are able to prove (and therefore discourage) invalid state transitions in shard blocks. Compared to TrueBit and Plasma: TrueBit [11] and Plasma [5] both use an incentive-driven verification game approach to provide scalable and secure solutions. Similar to our argument on the incentives for challengers to observe the network, the authors of TrueBit argue that, if there is no chance of finding a bug in the blocks, challengers will likely refuse to continue the monitoring task. In order to motivate the challengers to actively observe the network, TrueBit proposes to provide \u201cforced errors\u201d. These errors are produced at random and unpredictable time. The main objective of blocks with forced errors is to incentivize the challengers and keep them motivated to secure the network. These blocks are special and the creators and validators of these blocks are not penalized. Plasma provides an \u201cexit\u201d mechanism that aims at resolving the data availability problem. Specifically, in Plasma, when a participant cannot access block data of a Plasma chain, the participant can move her asset/token from the Plasma chain to the root chain (or the parent Plasma chain) by executing the \u201cexit\u201d mechanism. The participant then needs to wait for an amount of time, i.e. 1 week, in order for other participants to submit a fraud proof if the exit execution is falsified. In order to maintain fast confirmation time as in the current TomoChain PoSV design and to have the shards\u2019 liveness, our approach is driven by an incentive and mutual verification game. The latter aims at providing both fast confirmation and detection of Byzantiness of a block. By utilizing the very strong incentivizing-penalizing incentive-driven mutual verification game, challengers are strongly encouraged to work hard in order to keep the system safe and secure and shard masternodes are discouraged to act maliciously.","title":"Incentive-driven Mutual Verification Game for Safety and Security"},{"location":"wp-and-research/sharding-paper/#reshuffling-and-data-availability","text":"To enhance further the security of shards, it is very important that shards should be dynamic for resilience against attacks and failures of nodes in a shard. For example, one shard might be stuck in a situation where blocks are valid but cannot be finalized because attacking masternodes do not validate these blocks. A technique for dealing with this problem is to reshuffle the masternodes assigned to the shards. This means the set of masternodes for each shard is changed dynamically every epoch. At the end of each epoch, the randomization sampling is repeated for a different set of masternodes elected to participate into shards. Reshuffling enhances the security and resilience of the system. However, it introduces a new challenge: the data availability problem. In the latter, every masternode joining to a new shard must synchronize the blockchain portion of this new shard in order to be able to verify transactions belonging to it. If the portion is too large and the synchronization time is too short, the entire shard cannot verify any transaction, thus renders the shard useless for the whole synchronization time. This problem can be tackled by the following strategies:: Shard masternodes storing all states of other shards: It requires that all masternodes, even non-shard member nodes, must receive and store all of the portions of state in all shards. This solution allows for any masternodes to smoothly switch from one shard to or join any other shard without needing a data synchronization time. Gradual reshuffling: Instead of resampling the whole set of masternodes assigned to each shard at the end of each epoch, the reshuffling might only pull a subset of masternodes out of a shard while leaving the remainder intact, i.e. 1/10 of the masternodes are kicked out from a shard while the other masternodes still stay in the shard and the resampling takes c/10 (c is the shard size) masternodes randomly from the set of masternode candidates. Since the latter have been synchronizing all blocks (see Section IV for more information), the system can smoothly continue the operations without interrupting time for data synchronization. Randomization sampling in advance: Still using the strategy of giving masternodes joining new shards some amount of time to download the blockchain data of a shard, this approach lets the network execute the randomization sampling in the middle of an epoch. Therefore, assigned masternodes will know ahead of time to which shard they will contribute in the next epoch. In this fashion, these in-advance assigned masternodes will have enough time to download the blockchain data of the assigned shard to prepare for the next epoch. Currently, we have been leaning towards the first and second strategy because these solutions are more implementable and analyzable for security. These strategies will be rigorously analyzed before making a final decision since both have its own advantages and limitations. While the first strategy has advantage of simplicity and masternodes and candidates can switch from one shard to any other shard smoothly, the storage and network bandwidth of masternodes might be more needed. On the other hand, the second strategy can save more storage and network bandwidth, it raises a question: which masternodes should be kicked out of a shard if the performance of all masternodes in that shard is efficiently equal to each other\u2019s.","title":"Reshuffling and Data Availability"},{"location":"wp-and-research/sharding-paper/#conclusion","text":"The paper has presented a new solution to sharding architecture for public blockchains. It aims at being transparent to users and significantly improving the transaction processing performance, while still maintaining basic security requirements of the system. The paper uniquely identified and solved cross-shard transactions for smart contract call chaining and data availability problem in shard reshuffling. The proposed solution uses the Proof-of-Stake Voting (PoSV) efficient consensus protocol proposed by Tomochain for intra-shard consensus. Specifically, we relied on our decentralized randomization algorithm for randomized shard assignment of masternodes and proposed two cross-shard smart contract transaction schemes combined with a new smart contract deployment strategy. The latter places dependent smart contracts onto the same shard, which eliminates smart contract message calls chain problem involving multiple shards. In order to ensure safety and security of shards, we proposed an incentive-driven mutual verification game. In this latter, masternodes that create and/or verify an invalid block are penalized by losing all of their deposits to any participant that detects the invalidity by providing fraud proofs. Moreover, we also discuss the data availability problem in state sharding when shard reshuffling takes place and propose several possible solutions. We are currently analyzing rigorously the safety and security properties of the proposed architecture to show its soundness. In future, once the analysis will have been done, we will implement the proposed architecture on top of the TomoChain blockchain.","title":"Conclusion"},{"location":"wp-and-research/sharding-paper/#references","text":"[1] S. Nakamoto, \u201cBitcoin: A Peer-to-Peer Electronic Cash System,\u201d p. 9. [2] G. Wood, \u201cEthereum: a secure decentralised generalised transaction ledger,\u201d Ethereum Project Yellow Paper, pp. 1\u201332, 2014. [3] J. Poon and T. Dryja, \u201cThe Bitcoin Lightning Network:,\u201d p. 59. [4] P. Mccorry, S. Bakshi, I. Bentov, S. Meiklejohn, and A. Miller, \u201cPisa: Arbitration Outsourcing for State Channels.\u201d [5] J. Poon and V. Buterin, \u201cPlasma: Scalable Autonomous Smart Contracts,\u201d 2017. [6] L. Luu, V. Narayanan, C. Zheng, K. Baweja, S. Gilbert, and P. Saxena, \u201cA Secure Sharding Protocol For Open Blockchains,\u201d in Proceedings of the 2016 ACM SIGSAC Conference on Computer and Communications Security - CCS\u201916, 2016, pp. 17\u201330. [7] P. Barrett, \u201cZilliqa Technical Whitepaper,\u201d Zilliqa, pp. 1\u20138, 2017. [8] M. Castro, M. Castro, B. Liskov, and B. Liskov, \u201cPractical Byzantine fault tolerance,\u201d OSDI {\u2019}99: Proceedings of the third symposium on Operating systems design and implementation, no. February, pp. 173\u2013186, 1999. [9] E. Kokoris-Kogias, P. Jovanovic, L. Gasser, N. Gailly, and E. Syta, \u201cOmniLedger: A Secure, Scale-Out, Decentralized Ledger via Sharding,\u201d IEEE Symposium on Security & Privacy, 2018. [10] Tomochain R&D Team, \u201cTomochain: Masternodes Design Technical White Paper Version 1.0,\u201d Technical White Paper, 2018. [11] J. Teutsch and C. Reitwie\u00dfner, \u201cA scalable veri\ufb01cation solution for blockchains,\u201d p. 50, 2017. [12] Kokoris-Kogias, E., Jovanovic, P., Gasser, L., Gailly, N., Syta, E., & Ford, B. (2018, May). Omniledger: A secure, scale-out, decentralized ledger via sharding. In 2018 IEEE Symposium on Security and Privacy (SP) (pp. 583-598). IEEE.","title":"References"},{"location":"wp-and-research/technical-whitepaper/","text":"Introduction \u00b6 version 1.0 ( pdf version ) The blockchain industry and the infrastructure of the Internet of Value are being built rapidly around the globe, and to many the atmosphere is eerily similar to the building of the Internet in the late \u201890s, with pioneers and dreamers coming together to build a new future. TomoChain can be a leading part of this phenomenon through seamlessly merging an ecosystem of applications with cryptographic tokens used by millions of mainstream users with a unique blockchain infrastructure architecture allowing for a fast, secure, frictionless payment and trusted store of value. Distributed systems have been researched in a \u201c permissioned setting \u201d where the number of participants in the system and their identities are common knowledge. In 2008, Satoshi Nakamoto - \u201cproposed his celebrated \u201cblockchain protocol\u201d which attempts to achieve consensus in a permissionless setting: anyone can join (or leave) the protocol execution (without getting permission from a centralized or distributed authority), and the protocol instructions do not depend on the identities of the players\u201d (see here ). Later on, Ethereum with its Ethereum Virtual Machine (EVM) proposed several significant enhancements compared to Bitcoin, including Smart Contracts. Both Bitcoin and Ethereum have some issues, especially with transaction processing performance. In order to construct an efficient and secured consensus protocol for TomoChain , we tackle the following main bottlenecks of classic blockchains: Efficiency: Existing blockchains as employed by major crypto-currencies(e.g., Bitcoin or Ethereum) do not scale well to handle a large transaction volume, e.g. Bitcoin and Ethereum can handle around 10 transactions/second. This small throughput severely hinders a wide-spread adoption of such crypto-currencies. Confirmation times: The 10 minutes Bitcoin block-time is significantly larger than network latency. Furthermore, a Bitcoin block requires 5 subsequent blocks following it so that it can be confirmed; thus it takes on average one hour for a transaction to be confirmed (with low confidence). While Ethereum uses a smaller block-time, the average confirmation time still remains relatively high, around 13 minutes Cardano . These long confirmation times hinder many important applications (especially smart contract applications). Fork Generation: The problem of fork chain consumes computational energy, time, and creates potential vulnerabilities for different types of attacks. With the motivation as mentioned above, our persistent and ultimate goal of research is to propose the consensus protocol focusing on the following key strategies: Double Validation to strengthen security and reduce fork Randomization to guarantee the fair and prevent handshaking attack Fast confirmation time and efficient checkpoints for finality or rebase To start dealing with these problems, in this paper, we present an overview architectural design of TomoChain \u2019s master nodes. In particular, we propose (PoSV) consensus, a Proof-of-Stake (PoS)-based blockchain protocol with a fair voting mechanism, rigorous security guarantees and fast finality. We also present a novel reward mechanism and show that, with this mechanism, the blockchain has a low probability of forks, fast confirmation times, plus the contributions and benefits of masternodes are fair in the sense that the probability distribution function is uniform eventually. Structure of the remainder of the paper \u00b6 Section TomoChain Overview : explains the intuition ideas and overview architectural design of masternodes, framework and background protocols that help mass readers (e.g., investors, traders, others) who may not have technical knowledge understand our mechanism easily. Section Stakeholders & Voting presents TomoChain stakeholder policy, masternode committee voting systems, and reward mechanism. Section TomoChain consensus protocol explains the motivation and double validation process as well as finality checkpoint of the protocol. In Section Protocol formalizations , we present the formalization of our model in a mathematical way to show the soundness of our model and protocol. Section Security Analysis discusses the security analysis and resistant strain of potential attacks. We discuss and compare TomoChain with several existing blockchains in Section related work . Finally, we conclude the paper in Section Conclusion . TomoChain Masternode Design \u00b6 The TomoChain architecture \u00b6 The TomoChain blockchain is produced and maintained by a set of masternodes in a consistent manner through the TomoChain consensus protocol as shown in Fig. architecture . These masternodes are full nodes that hold TOMO. For a token holder to become a masternode, two requirements must be satisfied: The token holder must hold at least a minimum required amount of tokens (see next section for more details). The token holder must be one of the most voted masternode candidates in the system. The voting by token holders is credited through a Voting DApp that allows token holders to send TOMO through the smart contract mechanism . In addition to the voting system which is an improvement over the current Bitcoin and Ethereum blockchain, TomoChain also provides a new technique, namely Double Validation complemented with a Randomization mechanism. This new technique significantly decreases the probability of having invalid blocks in the blockchain. These enhancements and the components of TomoChain are step-by-step detailed in the followings. Stakeholders & Voting \u00b6 Token holders, Masternodes \u00b6 Token holder is as simple as its name: users who join the network, who own and transfer TOMO. Masternodes are full-nodes which maintain a copy of the blockchain, produce blocks and keep the chain consistent. It is worth noting that, TomoChain does not have miners as in the current Proof-of-Work-based blockchain systems such as Bitcoin and Ethereum. Only masternodes can produce and validate blocks. Masternodes are selected via a voting system. The first requirement of being masternodes is to deposit 50 000 TOMO to the Voting Smart Contract. Then, these depositors are listed as masternode candidates in the Voting DApp, which allows token holders to vote for them by sending TOMO to the smart contract. Masternodes which work hard in the system to create and verify blocks will be incentivized with TOMO. Furthermore, token holders who vote for these incentivized masternodes will also receive TOMO in proportion to the amount of TOMO they have invested via ballots. TomoChain engineers take responsibility to design that fair, explicit, automated and accountable reward mechanism. The list of masternode candidates is dynamically sorted based on voted tokens. The performance of the masternodes will be tracked and reported back to the token holders in terms of three main metrics: CPU/Memory charts which ensure the workload of the masternodes, the number of signed blocks which indicates their work performance and the last signed block which figures out their last activity. Token holders, at any time, can unvote masternodes, who have low performance, and give their votes to the other masternodes who have beter performance. Token holders have incentives to do that because their voted tokens are seen as investment to their supported masternodes, thus they should choose a voting strategy in order to maximize their profit from the investment. This simple trick keeps the system healthy since masternodes always have to race for their position so that all weak masternodes will eventually be eliminated. Therefore, only the strongest masternodes are voted and can flourish. Voting & Masternode Committee \u00b6 There are maximum one hundred fifty masternodes elected in the masternode committee. The required amount of deposit for masternode role is set at 50 000 TOMO. This amount is locked in a voting smart contract . Once a masternode is demoted (by not remaining in the top one hundred fifty voted masternodes) or intentionally quits the masternode candidates list/masternode committee, the deposit will have been locked for a month. Token holders can vote at any time, by any number of votes (which is actually counted by the amount of TOMO they bet on some masternode candidates). They can use masternode\u2019s performance statistics in the governance Voting DApp as reference information to give votes. The set of masternodes is dynamically sorted by the amount of TOMO and counted up to one hundred fifty, upon reception of votes. Reward Mechanism \u00b6 For each iteration of 900 blocks (called epoch), a checkpoint block is created, which implements only reward works. The masternode, who takes turn in the circular and sequential order to create blocks, has to scan all of the created blocks in the epoch and count number of signatures. The reward mechanism is designed following the policy as follows: the higher number of signatures one masternode has made, the more reward he earns. For instance, within an epoch, masternode A who has sealed twice the blocks than masternode B earns double amount of TOMO than masternode B does. Furthermore, there is also a reward sharing ratio among token holders and masternode who has been elected supported by the token holders. Specifically, each epoch consists of 900 blocks, which will reward a total of 250 TOMO in the first two years. This amount of 250 TOMO will be divided to all of the Masternodes proportionally to the number of signatures they sign during the epoch. Afterward, the reward achieved by each Masternode will be divided into three portions. - Infrastructure Reward : The first portion of 40% called Infrastructure Reward goes to the Masternode. Staking Reward : The second portion of 50% called Staking Reward goes to the pool of all voters for that Masternode which is shared proportionally based on the token stake. Foundation Reward : The last portion of 10% called Foundation Reward goes to a special account controlled by the Masternode Foundation, which is run by TomoChain company initially. It is worth noting that coin-holders who unvote before the checkpoint block will not receive any shared reward in the Staking Reward portion. TomoChain Consensus Protocol \u00b6 Double Validation Process \u00b6 In TomoChain, masternodes share equal responsibility to run the system and keep it stable. Full nodes should run on powerful hardware configuration and high-speed network connectivity in order to ensure the required block time (target to two seconds). Only masternodes can produce and seal blocks. In order for that, the TomoChain consensus relies on the concept of Double Validation that improves some existing consensus mechanisms, namely Single Validation . In the followings, we first describe the Double Validation , then analyze the differences and improvements of Double Validation compared to Single Validation . Double Validation (DV) \u00b6 Similar to some existing PoS-based blockchains such as Cardano , each block is created by a block producer, namely masternode, that takes its block creation permission turn following a pre-determined and circular sequence of masternodes for each epoch. However, differently from these existing blockchains, DV in TomoChain requires the signatures of two masternodes on a block to be able to push the block to the blockchain. One of the masternodes is the block creator while the other one, namely block verifier is randomly selected among the set of voted masternodes that validates the block and signs it. In the followings, for more convenience, block creator and block verifier are used interchangeably for the masternode 1 (block producer) and the randomly selected masternode 2 for a block, respectively. The process of randomly selecting the block verifiers is detailed in the next paragraphs. Note that, there is no mining in the block creation as in Proof-of-Work-based blockchains (e.g. Ethereum and Bitcoin). It means that a created block is valid if and only if it is sealed by enough two signatures from a block creator and a corresponding block verifier to confirm the correctness of it. We believe this DV technique enhances the stability of the blockchain by diminishing the probability of producing \u201cgarbage\u201d blocks while still maintaining the system security and consistency. Randomization of block verifiers in DV is the key factor of reducing risks coming from paired masternodes trying to commit malicious blocks. Furthermore, comparing to some current public blockchains in the market, by utilizing the DV technique, TomoChain brings significant improvements in the block time by only requiring two signatures per block. For the purpose of showing our enhancement over existing PoS-based blockchains, we analyze the differences between DV and the Single Validation mechanism in some existing blockchains as follows. Improvements of Double Validation over Single Validation \u00b6 Let\u2019s show the improvements of DV compared to Single Validation through analyzing some attacking scenarios as shown in Fig. Single Validation example and Fig. Double Validation example . Single Validation In Single Validation, in an epoch, each masternode, e.g. M1, sequentially takes its turn to create a block, e.g. block100. The next masternode, e.g. M2, in the sequence then validates the created block100. If block100 is invalid (that potentially means that M1 is an attacker) and contains a transaction that invalidly benefits M1, if M2 is honest (see Fig. SV a ), it rejects block100 and creates another block100 next to block99. But, if M2 is an attacker (see Fig. SV b ) that corporates with M1, M2 ignores the invalidation of block100, signs it and creates next block, namely block101 that is valid. Then, the next masternode M3 verifies that block101 is valid, M3 signs block101 and creates a block102. By this way, Single Validation potentially leaves the blockchain with \u201cgarbage\u201d or invalid blocks which require a \u201crebase\u201d to restore the validity of the blockchain. Single Validation (SV): (a) SV with block creation masternode as an attacker and (b) SV with two consecutive block creation masternodes as attackers Double Validation We claim that our DV technique significantly reduces the probability of having garbage blocks in the blockchain. Assuming that M1 and M2 are the block creator and block verifier, respectively, for block100 in our DV. If block100 is invalid and M2 is honest (see Fig. DV a ), M2 will not seal this block. Therefore, the next block creator M3 for creating block101 will see that block100 does not have enough 2 signatures, thus reject block100 and create another block100 next to block99. On the other hand, if M2 is also an attacker pairing/handshaking with M1 (see Fig. DV b ), M2 signs block100 despite its invalidity (remember that the block verifier M2 is randomly selected, there has little chance of successfully pairing M1 and M2). Next, even though M3 will verify that block100 has two valid signatures, M3 still rejects it because block100 is invalidated by M3 that will create another valid block100. In order to break the stability and consistency of the blockchain in this case, M3 should be an attacker together with M1 and M2, which, however, has a very low probability. In other words, DV strengthens the consistency of the blockchain and makes it hard to break. Double Validation (DV): (a) DV with block creator as an attacker and (b) DV with both block creator and block verifier as attackers Randomization for Block Verifiers for Double Validation \u00b6 The First Masternode/Block Creator \u00b6 The first masternode/block creator in a given epoch e can be selected by a round-turn game and can be formal defined as an array: \\begin{bmatrix} \\nu_1 \\end{bmatrix} = \\begin{bmatrix} V_{1.1}^e \\\\ V_{1.2}^e\\\\ \\cdot\\\\ \\cdot\\\\ \\cdot\\\\ V_{1.n-1}^e\\\\ V_{1.n}^e\\\\ \\end{bmatrix} Random Matrix and Smart Contract \u00b6 Let m be the number of masternodes, n be the number of slots in an epoch. In order to randomly generate the block verifiers for the next epoch e+1 , the process is performed by the following steps. Step 1: Random Numbers Generation and Commitment Phase: First, at the beginning of epoch e , each masternode V_i will securely create an array of n+1 special random numbers Recommend_i= [ r_{i.1}, r_{i.2}, ..., r_{i.n}, \\theta_i] , where r_{i.k}\\in [1, ..., m] indicating the recommendation of ordered list of block verifiers for the next epoch of V_i , and \\theta_i \\in \\{-1, 0, 1\\} is used for increasing the unpredictability of the random numbers. Second, each masternode V_i has to encrypt the array Recommend_i using a secret key SK_i , say Secret_i = Encrypt (Recommend_i, SK_i) . Next, each masternode forms a \" lock \u201d message that contains encrypted secret array Secret_i ; signs off this message with its blockchain\u2019s private key through the Elliptic Curve Digital Signature Algorithm (ECDSA) scheme currently used in Ethereum and Bitcoin along with the corresponding epoch index and its public key generated from its private key. By doing this, every masternode can check who created this lock message through ECDSA verification scheme and which epoch it relates to. Then, each node V_i sends their lock message with its signature and public key to a Smart contract stored in the blockchain, so that eventually each masternode collects and knows the lock s from all other masternodes. Step 2: Discovery and Recovery Phase: The recovery phase is for every node to reveal its previous lock message so that other nodes can get to know the secret array it has sent before. A masternode only starts revealing its lock message if all masternodes have sent their lock messages to the smart contract or a certain timeout event occurs. Each masternode then opens its lock message by sending an \u201d unlock \u201d message to the smart contract for other masternodes to open the corresponding lock. Imagine a commitment-like scheme in this case where a lock message is a commitment message locking its contained recommendation array Recommend_i (so that no one can open or guess the contained array), and the unlock message gives the key for other masternodes to decrypt the box and retrieve the values of Recommend_i . Eventually, a masternode has both locks and unlocks of others. If some elector is an adversary which might publish its lock but not intend to send the corresponding unlock, other masternodes can ignore the adversary\u2019s lock and set all its random values be 1 as default. The idea is simple: the network can keep working successfully even if some masternodes are adversaries. Step 3: Assembled Matrix and Computation Phase: At the point of the slot n^{th} of the epoch e , the secret arrays Secret_I in the smart contract will be decrypted by each masternode and return the plain version of Recommend_i . Each tuple of the first n numbers of each V_i will be assembled as the i^{th} column of an n \\times m matrix. All the last number \\theta_i forms a m\\times 1 matrix. Then each nodes will compute the block verifiers ordered list by some mathematical operations as explained below. The resulting output is a matrix n \\times 1 indicating the order of block verifiers for the next epoch e+1 . The Second Masternode/Block Verifier \u00b6 Then, each node soon compute the common array \\nu_2 for the order of the block verifiers by the following steps as in the upper equation as belows. Then, \\nu_2 is obtained by modulo operation of element values of \\nu'_2 as in the lower equation in the followings: \\label{eq:matrix} \\begin{bmatrix} \\nu'_2 \\end{bmatrix} = \\begin{bmatrix} v_{2.1}^{e+1} \\\\ v_{2.2}^{e+1} \\\\ \\vdots \\\\ v_{2.n}^{e+1} \\end{bmatrix} = \\begin{bmatrix} r_{1.1} & r_{2.1} & \\cdots & r_{m.1} \\\\ r_{1.2} & r_{2.2} & \\ddots & \\vdots \\\\ r_{1.3} & \\ddots & \\ddots & r_{m.3} \\\\ \\vdots & & r_{m-1.n-1} & r_{m.n-1} \\\\ r_{1.n} & \\cdots & r_{m-1.n} & r_{m.n} \\end{bmatrix} \\begin{bmatrix} \\theta_1 \\\\ \\theta_2 \\\\ \\theta_3 \\\\ \\vdots \\\\ \\theta_m \\end{bmatrix} \\label{eq:eq2} \\begin{bmatrix} \\nu_2 \\end{bmatrix} = \\begin{bmatrix} \\nu'_2 & mod & m \\end{bmatrix} = \\begin{bmatrix} \\left| v_{2.1}^{e+1}\\right| & mod & m \\\\ \\left| v_{2.2}^{e+1} \\right| & mod & m\\\\ \\vdots \\\\ \\left| v_{2.n}^{e+1} \\right| & mod & m \\end{bmatrix} Finality Analysis \u00b6 \"There is a standard definition of \u201ctotal economic finality\u201d: it takes place when \\frac{3}{4} of all masternodes make maximum-odds bets that a given block or state will be finalized. This condition offers very strong incentives for masternodes to never try colluding revert the block: once masternodes make such maximum-odds bets, in any blockchain where that block or state is not present, the masternodes lose their entire deposit\" (see here . TomoChain keeps that standardization in the design so that one block is considered as irreversible if it collects at least \\frac{3}{4} signatures of all masternodes committee. The time-line of blockchain creation process, checking finality and mark the block as immutable is described as in Figure: ChainMaking below. Consensus Protocol: Formalization \u00b6 Basic Concepts & Protocol Description \u00b6 In order to have a solid foundation for us to prove that our blockchain can achieve what are claimed, we first present our preliminary formalizations of the concepts that will be used in our yellow paper later. To start, as we are dealing with proof of stake consensus algorithm, we follow the way of formalization in the recent works in the literature like Cardano and here and here here . In particular, we recall the following concepts and definitions that were presented in Cardano and adapt them to the context of TomoChain. Time, Slots, Epoch \u00b6 As previously described, ideally, each epoch is divided into 900 block time, that is called block slot. Only one block can be created in a slot. We assume that there is a roughly synchronized clock that allows for masternodes to learn the current slot. This simplification will effectively permit masternodes to execute the signing and validation process of the PoSV consensus, where each masternode must collectively create a block to the current slot. For more simplification, each slot sl_r is accessed by an integer r \\in \\{1, 2, ...900\\} , and suppose that the real time window that corresponds to each slot has the following properties, which are similar to what are specified in Cardano . Every masternode can determine the index of the current slot based on the current time and \u201dany discrepancies between parties\u2019 local time are insignificant in comparison with the length of time represented by a slot\u201d Cardano The amount of a slot time is sufficient to guarantee that any message transmitted by an honest party at the beginning of the time window will be received by any other honest party by the end of that time window. While this assumption similar to Cardano , TomoChain requires it in order for a block creator to propagate its created block to the corresponding block verifier to ensure that the block is signed by both the masternodes before the next block creator builds another block on top of it. As mentioned in Section TomochainOverview , in our setting, we assume that the fixed collection of m (150) masternodes V_1, V_2, ...., V_m interact throughout the protocol. For each V_i a public/private key pair ( pk_i , sk_i ) for a prescribed signature scheme, ideally ECDSA, is generated. Furthermore, we assume that the public keys pk_1 ,.., pk_m of the masternodes are distributed and known by all of them (that means a masternode knows all public keys of other nodes). Some notable definitions of the blockchain concepts are defined following the notation in here . State A state (defined as in here ) is an encoded string st \\in \\{0,1\\}^\\lambda . Block A block (defined as in here ) B generated at a slot sl_i \\in \\{sl_1,...,sl_R\\} contains the current state st \\in \\{0, 1\\}^{\\lambda} , data d \\in \\{0, 1\\}^{*} , the slot number sl_i and a signature \\Sigma = Sign_{ski} (st, d, sl_i) computed under sk_i corresponding to the masternode V_i generating the block. Blockchain A blockchain (defined as in here ) C is a sequence of blocks B_1,..., B_n associated with a strictly increasing sequence of slots for which the state sti of B_i is equal to H(B_{i\u22121}) , where H is a collision-resistant cryptography hash function. A blockchain has a number of properties, including the length of a chain len(C) = n , which is its number of blocks, and the block B_n is the head of the chain, denoted head(C) . As mentioned earlier, in our TomoChain model, we set each time slot sl_i as 2 seconds; an epoch is a set R of 900 slots \\{ sl_1, sl_2, ..., sl_{900}\\} (an epoch time duration equals to 1800 seconds). In summary, the consensus protocol of TomoChain can be formalized in Algorithm ValidatorGeneration. The Algorithm ValidatorGeneration is simulated and explained as a process shown in Fig. EpochProcess . Security Analysis \u00b6 Nothing-at-stake \u00b6 Nothing-at-stake is a well-known problem in PoS-based blockchain, just like 51% attack in PoW algorithm. PoW-based miners require CapEx (capital expenditures) for buying mining equipment such as ASICs and OpEx (operation expenditures) such as electricity to solve mathematical puzzles securing the network (see here ). That means, there is always an intrinsic cost for miners in mining regardless of its success. In case of a fork, miners therefore always allocate their resource (equipment) to the chain that they believe is correct in order to get incentives for compensating the intrinsic costs in mining. In the contrary, in PoS-based systems without mining, during an ideal execution, for creating a fork only costs, masternodes actually do not incur intrinsic costs, other than roughly some block validation and signing cost. As a result, there\u2019s an inherent problem of the masternode having no downside to staking both forks. Therefore, there are actually two issues in the original design of PoS. On one hand, for any masternode, the optimal strategy is to validate every chain/fork, so that the masternode gets their rewards no matter which fork wins. On the other hand, for attackers/malicious masternodes, they can easily create a fork for double spending. Let\u2019s look back how TomoChain handles these two problems. As a reminder, TomoChain maintains a certain order of masternodes in creating and sealing blocks, in each epoch. For the first issue, random/arbitrary forks are hardly happened because the order of block creation masternodes is pre-determined for each epoch. Furthermore, the Double Validation mechanism eliminates the second issue because even one malicious masternode creates two blocks at his turn, only one block then can be validated by the second randomly selected masternode. Long-range attack \u00b6 In TomoChain , block is valid only if it collects double validation and finalized once \\frac{3}{4} of masternodes verify. Therefore, as long as the number of attackers or malicious nodes and/or fail-stop nodes is less equal than \\frac{1}{4} the number of masternodes, the number of masternodes signing a block is at least \\frac{3}{4} the total number of masternodes, which makes the block finalized. Thus, there is no chance for one malicious masternode to create longer valid chain because other masternodes will refuse it. Censorship Attack \u00b6 If there are more than \\frac{3}{4} malicious masternodes in TomoChain , censorship attack might happen. For example, these masternodes refuse valid blocks or simply become inactive. In this case, chain is stuck. In fact, masternodes are paid for their effort of correctly working so that the chain is actively updated in a consistent manner. More importantly, becoming masternode means a certain amount of tokens is locked, 50 000 TOMO in particular. As a result, in order to control more than \\frac{3}{4} masternodes, attackers must hold a considerable amount of TOMO and gain huge support from token holders. And because of this, the attackers do not have incentives to do any malicious action to harm the chain. However, in worst case, TomoChain has to do a soft fork in order to reduce number of masternodes to keep the chain running and figure out slasher mechanisms for those malicious masternodes. Relay Attack \u00b6 TomoChain supports EIP155 Transactions in TomoChain are included CHAIN\\_ID specified for different public chains. Table table:chainid shows recognized CHAIN\\_ID s. CHAIN_ID Chain(s) 1 Ethereum mainnet 2 Morden (disused), Expanse mainnet 3 Ropsten 4 Rinkeby 30 Rootstock mainnet 31 Rockstock testnet 42 Kovan 61 Ethereum Classic mainnet 62 Ethereum Classic testnet 1337 Geth private chains (default) 77 Sokol, the public POA Network testnet 99 Core, the public POA Network main network 88 Mainnet 89 Testnet Safety and liveness \u00b6 Safety implies having a single agreed upon chain where there are not two or more competing chains with valid transactions in either (see here . A consensus protocol can be safe when blocks have settlement finality, or else probabilistic finality. This last sentence reveals that can provide safety because it has a settlement finality. A consensus protocol is considered live if it can eventually propagate and make valid transactions onto the blockchain (see here . An occurrence of a liveness fault is when transaction omission, information withholding, or message reordering, among a number of violations are observed. This type of fault is unlikely to happen in TomoChain because the block creation masternodes list is ordered in a pre-determined way for each epoch, thus if even an attacking masternode omits some transactions, the latter will be processed and validated by the next honest masternode in the next block. DDOS Attack \u00b6 Masternodes are encouraged to run in well-known public cloud providers such as AWS, Google Cloud or Microsoft Azure which provides multiple DDOS prevention mechanisms. Even in case that some nodes are attacked or fail-stop, the network still works correctly as long as the number of failing and/or attacked nodes is less than 1/4 of the number of masternodes. Spam Attack \u00b6 TomoChain keeps the same transaction fee mechanism as Ethereum which is indicated via gasPrice. However, TomoChain supports minimum transaction fee (at 1 wei), which somehow enables spamming that attacker tries to broadcast a huge amount of low fee transactions to the system. However, TomoChain masternodes always sort transactions and pick up only high fee transactions into the proposing block. Thus, spammers have little chance to harm the system. Related work \u00b6 Consensus plays an important role to guarantee the success of distributed and decentralized systems. Bitcoin\u2019s core consensus protocol, often referred to as Nakamoto consensus Bitcoin , realizes a \u201creplicated state machine\u201d abstraction, where nodes in a permissionless network reach agreement about a set of transactions committed as well as their ordering (see here . However, known permissionless consensus protocols such as Bitcoin\u2019s Nakamoto consensus come at a cost. Bitcoin and Ethereum rely on PoW to roughly enforce the idea of \u201cone vote per hashpower\u201d and to defend against Sybil attacks. Unfortunately, PoW-based Bitcoin and Ethereum are known to have terrible performance (Bitcoin\u2019s transaction processing performance is at peak of around 7 transactions per second as previously mentioned). Moreover, PoW is much criticized because it costs a lot of electricity energy. In order to design an efficient and cost-effective consensus protocol in the permissionless model, PoS has been discussed extensively in the Bitcoin and Ethereum forum . A PoS blockchain can substitute the costly PoW in Nakamoto\u2019s blockchain while still providing similar guarantees in terms of transaction processing in the presence of a dishonest minority of users, where this \u201cminority\u201d is to be understood here in the context of stake rather than computational power Cardano . The Ethereum design Casper , published by Buterin & Griffith, provides as its initial version a PoW/PoS hybrid consensus protocol, which might eventually switch to a pure PoS system. As in TomoChain , Ethereum Casper requires that validators (term similar to block creators) have to deposit an amount. In fact, some concepts used in TomoChain such as checkpoint blocks are borrowed from Casper. Our (PoSV) consensus protocol proposed in this paper can be seen as a hybrid model. In particular, first, we apply with voting and Double Validation to create, verify and vote for blocks smoothly and efficiently. Whenever potentials of fork branches are detected, we employ the idea in PoW to select the longest branch with the most votes and discard the other branches. This hybrid approach not only increases the performance and security of blockchain, but also reduces the fork situation in an efficient and practical manner. Recently, there are several consensus protocol research works that are closely related to TomoChain such as EOS and Ouroboros of Cardano . The mechanism of voting for masternodes for reaching consensus is utilized by Bitshares and EOS , whose consensus protocol is termed Delegated Proof-of-Stake (DPoS). DPoS is similar to the Proof-of-Stake Voting consensus of TomoChain in the sense that masternodes (block creators or witnesses in DPoS) are elected through a voting system. However, TomoChain requires that masternodes need to deposit a required minimum amount of TOMO to become a masternode candidate, which puts more pressure on the masternodes to work honestly. Furthermore, the Double Validation mechanism of TomoChain lowers the probability of handshaking attacks and having invalid blocks, as previously analyzed. EOS also has a maximum of 21 block producers for each epoch, which is less decentralized than TomoChain with a maximum of 150 masternodes elected (and this number of masternodes can be changed following the decentralized governance through voting). The research-backed Cardano blockchain solution, namely Ouroboros, with the ADA coin, which is purely based on Proof-of-Stake, promisingly claims to provide rigorous security guarantees. Similarly to TomoChain , Ouroboros has a set of block producers for each epoch for creating blocks and each block producer candidate needs to deposit a minimum amount of stake (an amount of ADA). However, note that, Ouroboros only provides Single Validation , while Double Validation of TomoChain provides several advantages over Single Validation, as previously analyzed. In Ouroboros, the order of block producers, selected among stakers, is based on a biased randomization while the TomoChain \u2019s randomization for block verifiers is potentially uniform and based on smart contracts. Furthermore, the use of voting as in TomoChain and DPoS enables a more incentive equality between stakers: In Ouroboros, stakers with very little stake have a very small probability of becoming block creators, while, in TomoChain , these stakers can choose an optimal strategy to vote for potential masternodes to get incentives. Conclusion and perspectives \u00b6 In this paper, we proposed PoSV, a PoS Voting-based blockchain protocol with heuristic and fair voting mechanism, rigorous security guarantees, and fast finality. We also presented a novel reward mechanism and show that, with this mechanism, the blockchain has a low probability of having forks, fast confirmation time, plus the contributions and benefits of masternodes are fair in the sense that the probability distribution function is uniform eventually. Perspectives \u00b6 Future work The TomoChain team is currently working on the implementation of the Proof-of-Stake Voting, which will be released on schedule as stated in our roadmap. Furthermore, in parallel with our novel consensus protocol, we will investigate the Sharding mechanism in order to provide even better transaction processing performance. We believe that, the Sharding technique with the stable number of masternodes will provide better stability and efficiency to the blockchain. At the same time, we commit to keep EVM-compatible smart contracts within our masternode sharding framework. Economic sustainability is also an important concept for a blockchain based decentralized network. That means to maintain the network in a sustainable condition, an equilibrium needs to be achieved, in which the cost of running the network infrastructure could be offset by the revenues generated. In this context, the cost of network infrastructure consists of two parts: the physical cost of having hardware such as servers, memories that passes the network technical requirements; and the capital cost of having TOMO locked into smart-contracts. The revenues for Masternodes would primarily come from Reward Engine emission, and later on from service revenues such as token exchange fees provided by applications running on top of TomoChain. We will publish a TomoChain economic analysis and proposal, separate from this technical paper in a later date. References \u00b6 Satoshi Nakamoto. Bitcoin: A peer-to-peer electronics cash system. 2008. pdf Ethereum Foundation. Ethereum\u2019s White Paper. , 2014. Online available 25/05/2018. link . D. Larimer. Delegated Proof-of-Stake (DPOS). BitShare White Paper 2014. link . S. King and S. Nadal. PPCoin: Peer-to-peer crypto-currency with proof-of-stake. Self-Published, 2012. pdf V. Buterin. On public and private blockchains. Ethereum Blog, 2015. link . A. Kiayias, A. Russell, B. David, and R. Oliynykov: Ouroboros: A Provably Secure Proof-of-Stake Blockchain Protocol. IACR-CRYPTO-2017. pdf D. Mingxiao, et al. A Review on Consensus Algorithms of Blockchain. 2017 IEEE International Conference on Systems, Man, and Cybernetics (SMC) Banff Center, Banff, Canada, October 5-8, 2017 link R. Pass and E. Shi. Rethinking Large-Scale Consensus. In the Proceedings of the IEEE 30th Computer Security Foundations Symposium, 2017. Thunder Token Foundation: Thunder Consensus White Paper, Janurary, 2018 pdf . R. Pass, L. Seeman, and A. Shelat. Analysis of the Blockchain Protocol in Asynchronous Networks. In EUROCRYPTO 2017 pdf . Juan A. Garay, A. Kiayias, and N. Leonardos. The bitcoin backbone protocol: Analysis and applications. In Elisabeth Oswald and Marc Fischlin, editors, Advances in Cryptology - EUROCRYPT 2015, Volume 9057 of Lecture Notes in Computer Science, pages 281\u2013310. Springer, 2015 pdf . Tendermint Team. Understanding the Basics of a Proof-of-Stake Security Model. link . V. Buterin. On Settlement Finality. link . EOS Team. EOS.IO Technical White Paper v2. https://github.com/EOSIO/Documentation/blob/master/TechnicalWhitePaper.md . Online available 25/05/2018. link Bitshares Team. Delegated Proof-of-Stake Consensus. https://bitshares.org/technology/delegated-proof-of-stake-consensus/. Online available 25/05/2018. link R. Pass, and E. Shi. (2017). Hybrid consensus: Efficient consensus in the permissionless model. In LIPIcs-Leibniz International Proceedings in Informatics (Vol. 91). Schloss Dagstuhl-Leibniz-Zentrum fuer Informatik pdf . V. Buterin, and V. Griffith. (2017). Casper the Friendly Finality Gadget. arXiv preprint arXiv:1710.09437. link H. McCook. Under the Microscope: Economic and Environmental Costs of Bitcoin Mining. link","title":"Technical whitepaper"},{"location":"wp-and-research/technical-whitepaper/#introduction","text":"version 1.0 ( pdf version ) The blockchain industry and the infrastructure of the Internet of Value are being built rapidly around the globe, and to many the atmosphere is eerily similar to the building of the Internet in the late \u201890s, with pioneers and dreamers coming together to build a new future. TomoChain can be a leading part of this phenomenon through seamlessly merging an ecosystem of applications with cryptographic tokens used by millions of mainstream users with a unique blockchain infrastructure architecture allowing for a fast, secure, frictionless payment and trusted store of value. Distributed systems have been researched in a \u201c permissioned setting \u201d where the number of participants in the system and their identities are common knowledge. In 2008, Satoshi Nakamoto - \u201cproposed his celebrated \u201cblockchain protocol\u201d which attempts to achieve consensus in a permissionless setting: anyone can join (or leave) the protocol execution (without getting permission from a centralized or distributed authority), and the protocol instructions do not depend on the identities of the players\u201d (see here ). Later on, Ethereum with its Ethereum Virtual Machine (EVM) proposed several significant enhancements compared to Bitcoin, including Smart Contracts. Both Bitcoin and Ethereum have some issues, especially with transaction processing performance. In order to construct an efficient and secured consensus protocol for TomoChain , we tackle the following main bottlenecks of classic blockchains: Efficiency: Existing blockchains as employed by major crypto-currencies(e.g., Bitcoin or Ethereum) do not scale well to handle a large transaction volume, e.g. Bitcoin and Ethereum can handle around 10 transactions/second. This small throughput severely hinders a wide-spread adoption of such crypto-currencies. Confirmation times: The 10 minutes Bitcoin block-time is significantly larger than network latency. Furthermore, a Bitcoin block requires 5 subsequent blocks following it so that it can be confirmed; thus it takes on average one hour for a transaction to be confirmed (with low confidence). While Ethereum uses a smaller block-time, the average confirmation time still remains relatively high, around 13 minutes Cardano . These long confirmation times hinder many important applications (especially smart contract applications). Fork Generation: The problem of fork chain consumes computational energy, time, and creates potential vulnerabilities for different types of attacks. With the motivation as mentioned above, our persistent and ultimate goal of research is to propose the consensus protocol focusing on the following key strategies: Double Validation to strengthen security and reduce fork Randomization to guarantee the fair and prevent handshaking attack Fast confirmation time and efficient checkpoints for finality or rebase To start dealing with these problems, in this paper, we present an overview architectural design of TomoChain \u2019s master nodes. In particular, we propose (PoSV) consensus, a Proof-of-Stake (PoS)-based blockchain protocol with a fair voting mechanism, rigorous security guarantees and fast finality. We also present a novel reward mechanism and show that, with this mechanism, the blockchain has a low probability of forks, fast confirmation times, plus the contributions and benefits of masternodes are fair in the sense that the probability distribution function is uniform eventually.","title":"Introduction"},{"location":"wp-and-research/technical-whitepaper/#structure-of-the-remainder-of-the-paper","text":"Section TomoChain Overview : explains the intuition ideas and overview architectural design of masternodes, framework and background protocols that help mass readers (e.g., investors, traders, others) who may not have technical knowledge understand our mechanism easily. Section Stakeholders & Voting presents TomoChain stakeholder policy, masternode committee voting systems, and reward mechanism. Section TomoChain consensus protocol explains the motivation and double validation process as well as finality checkpoint of the protocol. In Section Protocol formalizations , we present the formalization of our model in a mathematical way to show the soundness of our model and protocol. Section Security Analysis discusses the security analysis and resistant strain of potential attacks. We discuss and compare TomoChain with several existing blockchains in Section related work . Finally, we conclude the paper in Section Conclusion .","title":"Structure of the remainder of the paper"},{"location":"wp-and-research/technical-whitepaper/#Sec:MasternodeDesign","text":"","title":"TomoChain Masternode Design"},{"location":"wp-and-research/technical-whitepaper/#Sec:TomochainOverview","text":"The TomoChain blockchain is produced and maintained by a set of masternodes in a consistent manner through the TomoChain consensus protocol as shown in Fig. architecture . These masternodes are full nodes that hold TOMO. For a token holder to become a masternode, two requirements must be satisfied: The token holder must hold at least a minimum required amount of tokens (see next section for more details). The token holder must be one of the most voted masternode candidates in the system. The voting by token holders is credited through a Voting DApp that allows token holders to send TOMO through the smart contract mechanism . In addition to the voting system which is an improvement over the current Bitcoin and Ethereum blockchain, TomoChain also provides a new technique, namely Double Validation complemented with a Randomization mechanism. This new technique significantly decreases the probability of having invalid blocks in the blockchain. These enhancements and the components of TomoChain are step-by-step detailed in the followings.","title":"The TomoChain architecture"},{"location":"wp-and-research/technical-whitepaper/#Sec:StakeVoting","text":"","title":"Stakeholders &amp; Voting"},{"location":"wp-and-research/technical-whitepaper/#coin-holders-masternodes","text":"Token holder is as simple as its name: users who join the network, who own and transfer TOMO. Masternodes are full-nodes which maintain a copy of the blockchain, produce blocks and keep the chain consistent. It is worth noting that, TomoChain does not have miners as in the current Proof-of-Work-based blockchain systems such as Bitcoin and Ethereum. Only masternodes can produce and validate blocks. Masternodes are selected via a voting system. The first requirement of being masternodes is to deposit 50 000 TOMO to the Voting Smart Contract. Then, these depositors are listed as masternode candidates in the Voting DApp, which allows token holders to vote for them by sending TOMO to the smart contract. Masternodes which work hard in the system to create and verify blocks will be incentivized with TOMO. Furthermore, token holders who vote for these incentivized masternodes will also receive TOMO in proportion to the amount of TOMO they have invested via ballots. TomoChain engineers take responsibility to design that fair, explicit, automated and accountable reward mechanism. The list of masternode candidates is dynamically sorted based on voted tokens. The performance of the masternodes will be tracked and reported back to the token holders in terms of three main metrics: CPU/Memory charts which ensure the workload of the masternodes, the number of signed blocks which indicates their work performance and the last signed block which figures out their last activity. Token holders, at any time, can unvote masternodes, who have low performance, and give their votes to the other masternodes who have beter performance. Token holders have incentives to do that because their voted tokens are seen as investment to their supported masternodes, thus they should choose a voting strategy in order to maximize their profit from the investment. This simple trick keeps the system healthy since masternodes always have to race for their position so that all weak masternodes will eventually be eliminated. Therefore, only the strongest masternodes are voted and can flourish.","title":"Token holders, Masternodes"},{"location":"wp-and-research/technical-whitepaper/#voting-masternode-committee","text":"There are maximum one hundred fifty masternodes elected in the masternode committee. The required amount of deposit for masternode role is set at 50 000 TOMO. This amount is locked in a voting smart contract . Once a masternode is demoted (by not remaining in the top one hundred fifty voted masternodes) or intentionally quits the masternode candidates list/masternode committee, the deposit will have been locked for a month. Token holders can vote at any time, by any number of votes (which is actually counted by the amount of TOMO they bet on some masternode candidates). They can use masternode\u2019s performance statistics in the governance Voting DApp as reference information to give votes. The set of masternodes is dynamically sorted by the amount of TOMO and counted up to one hundred fifty, upon reception of votes.","title":"Voting &amp; Masternode Committee"},{"location":"wp-and-research/technical-whitepaper/#reward-mechanism","text":"For each iteration of 900 blocks (called epoch), a checkpoint block is created, which implements only reward works. The masternode, who takes turn in the circular and sequential order to create blocks, has to scan all of the created blocks in the epoch and count number of signatures. The reward mechanism is designed following the policy as follows: the higher number of signatures one masternode has made, the more reward he earns. For instance, within an epoch, masternode A who has sealed twice the blocks than masternode B earns double amount of TOMO than masternode B does. Furthermore, there is also a reward sharing ratio among token holders and masternode who has been elected supported by the token holders. Specifically, each epoch consists of 900 blocks, which will reward a total of 250 TOMO in the first two years. This amount of 250 TOMO will be divided to all of the Masternodes proportionally to the number of signatures they sign during the epoch. Afterward, the reward achieved by each Masternode will be divided into three portions. - Infrastructure Reward : The first portion of 40% called Infrastructure Reward goes to the Masternode. Staking Reward : The second portion of 50% called Staking Reward goes to the pool of all voters for that Masternode which is shared proportionally based on the token stake. Foundation Reward : The last portion of 10% called Foundation Reward goes to a special account controlled by the Masternode Foundation, which is run by TomoChain company initially. It is worth noting that coin-holders who unvote before the checkpoint block will not receive any shared reward in the Staking Reward portion.","title":"Reward Mechanism"},{"location":"wp-and-research/technical-whitepaper/#Sec:ProtocolOverview","text":"","title":"TomoChain Consensus Protocol"},{"location":"wp-and-research/technical-whitepaper/#double-validation-process","text":"In TomoChain, masternodes share equal responsibility to run the system and keep it stable. Full nodes should run on powerful hardware configuration and high-speed network connectivity in order to ensure the required block time (target to two seconds). Only masternodes can produce and seal blocks. In order for that, the TomoChain consensus relies on the concept of Double Validation that improves some existing consensus mechanisms, namely Single Validation . In the followings, we first describe the Double Validation , then analyze the differences and improvements of Double Validation compared to Single Validation .","title":"Double Validation Process"},{"location":"wp-and-research/technical-whitepaper/#double-validation-dv","text":"Similar to some existing PoS-based blockchains such as Cardano , each block is created by a block producer, namely masternode, that takes its block creation permission turn following a pre-determined and circular sequence of masternodes for each epoch. However, differently from these existing blockchains, DV in TomoChain requires the signatures of two masternodes on a block to be able to push the block to the blockchain. One of the masternodes is the block creator while the other one, namely block verifier is randomly selected among the set of voted masternodes that validates the block and signs it. In the followings, for more convenience, block creator and block verifier are used interchangeably for the masternode 1 (block producer) and the randomly selected masternode 2 for a block, respectively. The process of randomly selecting the block verifiers is detailed in the next paragraphs. Note that, there is no mining in the block creation as in Proof-of-Work-based blockchains (e.g. Ethereum and Bitcoin). It means that a created block is valid if and only if it is sealed by enough two signatures from a block creator and a corresponding block verifier to confirm the correctness of it. We believe this DV technique enhances the stability of the blockchain by diminishing the probability of producing \u201cgarbage\u201d blocks while still maintaining the system security and consistency. Randomization of block verifiers in DV is the key factor of reducing risks coming from paired masternodes trying to commit malicious blocks. Furthermore, comparing to some current public blockchains in the market, by utilizing the DV technique, TomoChain brings significant improvements in the block time by only requiring two signatures per block. For the purpose of showing our enhancement over existing PoS-based blockchains, we analyze the differences between DV and the Single Validation mechanism in some existing blockchains as follows.","title":"Double Validation (DV)"},{"location":"wp-and-research/technical-whitepaper/#improvements-of-double-validation-over-single-validation","text":"Let\u2019s show the improvements of DV compared to Single Validation through analyzing some attacking scenarios as shown in Fig. Single Validation example and Fig. Double Validation example . Single Validation In Single Validation, in an epoch, each masternode, e.g. M1, sequentially takes its turn to create a block, e.g. block100. The next masternode, e.g. M2, in the sequence then validates the created block100. If block100 is invalid (that potentially means that M1 is an attacker) and contains a transaction that invalidly benefits M1, if M2 is honest (see Fig. SV a ), it rejects block100 and creates another block100 next to block99. But, if M2 is an attacker (see Fig. SV b ) that corporates with M1, M2 ignores the invalidation of block100, signs it and creates next block, namely block101 that is valid. Then, the next masternode M3 verifies that block101 is valid, M3 signs block101 and creates a block102. By this way, Single Validation potentially leaves the blockchain with \u201cgarbage\u201d or invalid blocks which require a \u201crebase\u201d to restore the validity of the blockchain. Single Validation (SV): (a) SV with block creation masternode as an attacker and (b) SV with two consecutive block creation masternodes as attackers Double Validation We claim that our DV technique significantly reduces the probability of having garbage blocks in the blockchain. Assuming that M1 and M2 are the block creator and block verifier, respectively, for block100 in our DV. If block100 is invalid and M2 is honest (see Fig. DV a ), M2 will not seal this block. Therefore, the next block creator M3 for creating block101 will see that block100 does not have enough 2 signatures, thus reject block100 and create another block100 next to block99. On the other hand, if M2 is also an attacker pairing/handshaking with M1 (see Fig. DV b ), M2 signs block100 despite its invalidity (remember that the block verifier M2 is randomly selected, there has little chance of successfully pairing M1 and M2). Next, even though M3 will verify that block100 has two valid signatures, M3 still rejects it because block100 is invalidated by M3 that will create another valid block100. In order to break the stability and consistency of the blockchain in this case, M3 should be an attacker together with M1 and M2, which, however, has a very low probability. In other words, DV strengthens the consistency of the blockchain and makes it hard to break. Double Validation (DV): (a) DV with block creator as an attacker and (b) DV with both block creator and block verifier as attackers","title":"Improvements of Double Validation over Single Validation"},{"location":"wp-and-research/technical-whitepaper/#randomization-for-block-verifiers-for-double-validation","text":"","title":"Randomization for Block Verifiers for Double Validation"},{"location":"wp-and-research/technical-whitepaper/#the-first-masternodeblock-creator","text":"The first masternode/block creator in a given epoch e can be selected by a round-turn game and can be formal defined as an array: \\begin{bmatrix} \\nu_1 \\end{bmatrix} = \\begin{bmatrix} V_{1.1}^e \\\\ V_{1.2}^e\\\\ \\cdot\\\\ \\cdot\\\\ \\cdot\\\\ V_{1.n-1}^e\\\\ V_{1.n}^e\\\\ \\end{bmatrix}","title":"The First Masternode/Block Creator"},{"location":"wp-and-research/technical-whitepaper/#random-matrix-and-smart-contract","text":"Let m be the number of masternodes, n be the number of slots in an epoch. In order to randomly generate the block verifiers for the next epoch e+1 , the process is performed by the following steps. Step 1: Random Numbers Generation and Commitment Phase: First, at the beginning of epoch e , each masternode V_i will securely create an array of n+1 special random numbers Recommend_i= [ r_{i.1}, r_{i.2}, ..., r_{i.n}, \\theta_i] , where r_{i.k}\\in [1, ..., m] indicating the recommendation of ordered list of block verifiers for the next epoch of V_i , and \\theta_i \\in \\{-1, 0, 1\\} is used for increasing the unpredictability of the random numbers. Second, each masternode V_i has to encrypt the array Recommend_i using a secret key SK_i , say Secret_i = Encrypt (Recommend_i, SK_i) . Next, each masternode forms a \" lock \u201d message that contains encrypted secret array Secret_i ; signs off this message with its blockchain\u2019s private key through the Elliptic Curve Digital Signature Algorithm (ECDSA) scheme currently used in Ethereum and Bitcoin along with the corresponding epoch index and its public key generated from its private key. By doing this, every masternode can check who created this lock message through ECDSA verification scheme and which epoch it relates to. Then, each node V_i sends their lock message with its signature and public key to a Smart contract stored in the blockchain, so that eventually each masternode collects and knows the lock s from all other masternodes. Step 2: Discovery and Recovery Phase: The recovery phase is for every node to reveal its previous lock message so that other nodes can get to know the secret array it has sent before. A masternode only starts revealing its lock message if all masternodes have sent their lock messages to the smart contract or a certain timeout event occurs. Each masternode then opens its lock message by sending an \u201d unlock \u201d message to the smart contract for other masternodes to open the corresponding lock. Imagine a commitment-like scheme in this case where a lock message is a commitment message locking its contained recommendation array Recommend_i (so that no one can open or guess the contained array), and the unlock message gives the key for other masternodes to decrypt the box and retrieve the values of Recommend_i . Eventually, a masternode has both locks and unlocks of others. If some elector is an adversary which might publish its lock but not intend to send the corresponding unlock, other masternodes can ignore the adversary\u2019s lock and set all its random values be 1 as default. The idea is simple: the network can keep working successfully even if some masternodes are adversaries. Step 3: Assembled Matrix and Computation Phase: At the point of the slot n^{th} of the epoch e , the secret arrays Secret_I in the smart contract will be decrypted by each masternode and return the plain version of Recommend_i . Each tuple of the first n numbers of each V_i will be assembled as the i^{th} column of an n \\times m matrix. All the last number \\theta_i forms a m\\times 1 matrix. Then each nodes will compute the block verifiers ordered list by some mathematical operations as explained below. The resulting output is a matrix n \\times 1 indicating the order of block verifiers for the next epoch e+1 .","title":"Random Matrix and Smart Contract"},{"location":"wp-and-research/technical-whitepaper/#the-second-masternodeblock-verifier","text":"Then, each node soon compute the common array \\nu_2 for the order of the block verifiers by the following steps as in the upper equation as belows. Then, \\nu_2 is obtained by modulo operation of element values of \\nu'_2 as in the lower equation in the followings: \\label{eq:matrix} \\begin{bmatrix} \\nu'_2 \\end{bmatrix} = \\begin{bmatrix} v_{2.1}^{e+1} \\\\ v_{2.2}^{e+1} \\\\ \\vdots \\\\ v_{2.n}^{e+1} \\end{bmatrix} = \\begin{bmatrix} r_{1.1} & r_{2.1} & \\cdots & r_{m.1} \\\\ r_{1.2} & r_{2.2} & \\ddots & \\vdots \\\\ r_{1.3} & \\ddots & \\ddots & r_{m.3} \\\\ \\vdots & & r_{m-1.n-1} & r_{m.n-1} \\\\ r_{1.n} & \\cdots & r_{m-1.n} & r_{m.n} \\end{bmatrix} \\begin{bmatrix} \\theta_1 \\\\ \\theta_2 \\\\ \\theta_3 \\\\ \\vdots \\\\ \\theta_m \\end{bmatrix} \\label{eq:eq2} \\begin{bmatrix} \\nu_2 \\end{bmatrix} = \\begin{bmatrix} \\nu'_2 & mod & m \\end{bmatrix} = \\begin{bmatrix} \\left| v_{2.1}^{e+1}\\right| & mod & m \\\\ \\left| v_{2.2}^{e+1} \\right| & mod & m\\\\ \\vdots \\\\ \\left| v_{2.n}^{e+1} \\right| & mod & m \\end{bmatrix}","title":"The Second Masternode/Block Verifier"},{"location":"wp-and-research/technical-whitepaper/#finality-analysis","text":"\"There is a standard definition of \u201ctotal economic finality\u201d: it takes place when \\frac{3}{4} of all masternodes make maximum-odds bets that a given block or state will be finalized. This condition offers very strong incentives for masternodes to never try colluding revert the block: once masternodes make such maximum-odds bets, in any blockchain where that block or state is not present, the masternodes lose their entire deposit\" (see here . TomoChain keeps that standardization in the design so that one block is considered as irreversible if it collects at least \\frac{3}{4} signatures of all masternodes committee. The time-line of blockchain creation process, checking finality and mark the block as immutable is described as in Figure: ChainMaking below.","title":"Finality Analysis"},{"location":"wp-and-research/technical-whitepaper/#Sec:ProtocolFormalization","text":"","title":"Consensus Protocol: Formalization"},{"location":"wp-and-research/technical-whitepaper/#basic-concepts-protocol-description","text":"In order to have a solid foundation for us to prove that our blockchain can achieve what are claimed, we first present our preliminary formalizations of the concepts that will be used in our yellow paper later. To start, as we are dealing with proof of stake consensus algorithm, we follow the way of formalization in the recent works in the literature like Cardano and here and here here . In particular, we recall the following concepts and definitions that were presented in Cardano and adapt them to the context of TomoChain.","title":"Basic Concepts &amp; Protocol Description"},{"location":"wp-and-research/technical-whitepaper/#time-slots-epoch","text":"As previously described, ideally, each epoch is divided into 900 block time, that is called block slot. Only one block can be created in a slot. We assume that there is a roughly synchronized clock that allows for masternodes to learn the current slot. This simplification will effectively permit masternodes to execute the signing and validation process of the PoSV consensus, where each masternode must collectively create a block to the current slot. For more simplification, each slot sl_r is accessed by an integer r \\in \\{1, 2, ...900\\} , and suppose that the real time window that corresponds to each slot has the following properties, which are similar to what are specified in Cardano . Every masternode can determine the index of the current slot based on the current time and \u201dany discrepancies between parties\u2019 local time are insignificant in comparison with the length of time represented by a slot\u201d Cardano The amount of a slot time is sufficient to guarantee that any message transmitted by an honest party at the beginning of the time window will be received by any other honest party by the end of that time window. While this assumption similar to Cardano , TomoChain requires it in order for a block creator to propagate its created block to the corresponding block verifier to ensure that the block is signed by both the masternodes before the next block creator builds another block on top of it. As mentioned in Section TomochainOverview , in our setting, we assume that the fixed collection of m (150) masternodes V_1, V_2, ...., V_m interact throughout the protocol. For each V_i a public/private key pair ( pk_i , sk_i ) for a prescribed signature scheme, ideally ECDSA, is generated. Furthermore, we assume that the public keys pk_1 ,.., pk_m of the masternodes are distributed and known by all of them (that means a masternode knows all public keys of other nodes). Some notable definitions of the blockchain concepts are defined following the notation in here . State A state (defined as in here ) is an encoded string st \\in \\{0,1\\}^\\lambda . Block A block (defined as in here ) B generated at a slot sl_i \\in \\{sl_1,...,sl_R\\} contains the current state st \\in \\{0, 1\\}^{\\lambda} , data d \\in \\{0, 1\\}^{*} , the slot number sl_i and a signature \\Sigma = Sign_{ski} (st, d, sl_i) computed under sk_i corresponding to the masternode V_i generating the block. Blockchain A blockchain (defined as in here ) C is a sequence of blocks B_1,..., B_n associated with a strictly increasing sequence of slots for which the state sti of B_i is equal to H(B_{i\u22121}) , where H is a collision-resistant cryptography hash function. A blockchain has a number of properties, including the length of a chain len(C) = n , which is its number of blocks, and the block B_n is the head of the chain, denoted head(C) . As mentioned earlier, in our TomoChain model, we set each time slot sl_i as 2 seconds; an epoch is a set R of 900 slots \\{ sl_1, sl_2, ..., sl_{900}\\} (an epoch time duration equals to 1800 seconds). In summary, the consensus protocol of TomoChain can be formalized in Algorithm ValidatorGeneration. The Algorithm ValidatorGeneration is simulated and explained as a process shown in Fig. EpochProcess .","title":"Time, Slots, Epoch"},{"location":"wp-and-research/technical-whitepaper/#Sec:SecurityAnalysis","text":"","title":"Security Analysis"},{"location":"wp-and-research/technical-whitepaper/#nothing-at-stake","text":"Nothing-at-stake is a well-known problem in PoS-based blockchain, just like 51% attack in PoW algorithm. PoW-based miners require CapEx (capital expenditures) for buying mining equipment such as ASICs and OpEx (operation expenditures) such as electricity to solve mathematical puzzles securing the network (see here ). That means, there is always an intrinsic cost for miners in mining regardless of its success. In case of a fork, miners therefore always allocate their resource (equipment) to the chain that they believe is correct in order to get incentives for compensating the intrinsic costs in mining. In the contrary, in PoS-based systems without mining, during an ideal execution, for creating a fork only costs, masternodes actually do not incur intrinsic costs, other than roughly some block validation and signing cost. As a result, there\u2019s an inherent problem of the masternode having no downside to staking both forks. Therefore, there are actually two issues in the original design of PoS. On one hand, for any masternode, the optimal strategy is to validate every chain/fork, so that the masternode gets their rewards no matter which fork wins. On the other hand, for attackers/malicious masternodes, they can easily create a fork for double spending. Let\u2019s look back how TomoChain handles these two problems. As a reminder, TomoChain maintains a certain order of masternodes in creating and sealing blocks, in each epoch. For the first issue, random/arbitrary forks are hardly happened because the order of block creation masternodes is pre-determined for each epoch. Furthermore, the Double Validation mechanism eliminates the second issue because even one malicious masternode creates two blocks at his turn, only one block then can be validated by the second randomly selected masternode.","title":"Nothing-at-stake"},{"location":"wp-and-research/technical-whitepaper/#long-range-attack","text":"In TomoChain , block is valid only if it collects double validation and finalized once \\frac{3}{4} of masternodes verify. Therefore, as long as the number of attackers or malicious nodes and/or fail-stop nodes is less equal than \\frac{1}{4} the number of masternodes, the number of masternodes signing a block is at least \\frac{3}{4} the total number of masternodes, which makes the block finalized. Thus, there is no chance for one malicious masternode to create longer valid chain because other masternodes will refuse it.","title":"Long-range attack"},{"location":"wp-and-research/technical-whitepaper/#censorship-attack","text":"If there are more than \\frac{3}{4} malicious masternodes in TomoChain , censorship attack might happen. For example, these masternodes refuse valid blocks or simply become inactive. In this case, chain is stuck. In fact, masternodes are paid for their effort of correctly working so that the chain is actively updated in a consistent manner. More importantly, becoming masternode means a certain amount of tokens is locked, 50 000 TOMO in particular. As a result, in order to control more than \\frac{3}{4} masternodes, attackers must hold a considerable amount of TOMO and gain huge support from token holders. And because of this, the attackers do not have incentives to do any malicious action to harm the chain. However, in worst case, TomoChain has to do a soft fork in order to reduce number of masternodes to keep the chain running and figure out slasher mechanisms for those malicious masternodes.","title":"Censorship Attack"},{"location":"wp-and-research/technical-whitepaper/#relay-attack","text":"TomoChain supports EIP155 Transactions in TomoChain are included CHAIN\\_ID specified for different public chains. Table table:chainid shows recognized CHAIN\\_ID s. CHAIN_ID Chain(s) 1 Ethereum mainnet 2 Morden (disused), Expanse mainnet 3 Ropsten 4 Rinkeby 30 Rootstock mainnet 31 Rockstock testnet 42 Kovan 61 Ethereum Classic mainnet 62 Ethereum Classic testnet 1337 Geth private chains (default) 77 Sokol, the public POA Network testnet 99 Core, the public POA Network main network 88 Mainnet 89 Testnet","title":"Relay Attack"},{"location":"wp-and-research/technical-whitepaper/#safety-and-liveness","text":"Safety implies having a single agreed upon chain where there are not two or more competing chains with valid transactions in either (see here . A consensus protocol can be safe when blocks have settlement finality, or else probabilistic finality. This last sentence reveals that can provide safety because it has a settlement finality. A consensus protocol is considered live if it can eventually propagate and make valid transactions onto the blockchain (see here . An occurrence of a liveness fault is when transaction omission, information withholding, or message reordering, among a number of violations are observed. This type of fault is unlikely to happen in TomoChain because the block creation masternodes list is ordered in a pre-determined way for each epoch, thus if even an attacking masternode omits some transactions, the latter will be processed and validated by the next honest masternode in the next block.","title":"Safety and liveness"},{"location":"wp-and-research/technical-whitepaper/#ddos-attack","text":"Masternodes are encouraged to run in well-known public cloud providers such as AWS, Google Cloud or Microsoft Azure which provides multiple DDOS prevention mechanisms. Even in case that some nodes are attacked or fail-stop, the network still works correctly as long as the number of failing and/or attacked nodes is less than 1/4 of the number of masternodes.","title":"DDOS Attack"},{"location":"wp-and-research/technical-whitepaper/#spam-attack","text":"TomoChain keeps the same transaction fee mechanism as Ethereum which is indicated via gasPrice. However, TomoChain supports minimum transaction fee (at 1 wei), which somehow enables spamming that attacker tries to broadcast a huge amount of low fee transactions to the system. However, TomoChain masternodes always sort transactions and pick up only high fee transactions into the proposing block. Thus, spammers have little chance to harm the system.","title":"Spam Attack"},{"location":"wp-and-research/technical-whitepaper/#Sec:relatedwork","text":"Consensus plays an important role to guarantee the success of distributed and decentralized systems. Bitcoin\u2019s core consensus protocol, often referred to as Nakamoto consensus Bitcoin , realizes a \u201creplicated state machine\u201d abstraction, where nodes in a permissionless network reach agreement about a set of transactions committed as well as their ordering (see here . However, known permissionless consensus protocols such as Bitcoin\u2019s Nakamoto consensus come at a cost. Bitcoin and Ethereum rely on PoW to roughly enforce the idea of \u201cone vote per hashpower\u201d and to defend against Sybil attacks. Unfortunately, PoW-based Bitcoin and Ethereum are known to have terrible performance (Bitcoin\u2019s transaction processing performance is at peak of around 7 transactions per second as previously mentioned). Moreover, PoW is much criticized because it costs a lot of electricity energy. In order to design an efficient and cost-effective consensus protocol in the permissionless model, PoS has been discussed extensively in the Bitcoin and Ethereum forum . A PoS blockchain can substitute the costly PoW in Nakamoto\u2019s blockchain while still providing similar guarantees in terms of transaction processing in the presence of a dishonest minority of users, where this \u201cminority\u201d is to be understood here in the context of stake rather than computational power Cardano . The Ethereum design Casper , published by Buterin & Griffith, provides as its initial version a PoW/PoS hybrid consensus protocol, which might eventually switch to a pure PoS system. As in TomoChain , Ethereum Casper requires that validators (term similar to block creators) have to deposit an amount. In fact, some concepts used in TomoChain such as checkpoint blocks are borrowed from Casper. Our (PoSV) consensus protocol proposed in this paper can be seen as a hybrid model. In particular, first, we apply with voting and Double Validation to create, verify and vote for blocks smoothly and efficiently. Whenever potentials of fork branches are detected, we employ the idea in PoW to select the longest branch with the most votes and discard the other branches. This hybrid approach not only increases the performance and security of blockchain, but also reduces the fork situation in an efficient and practical manner. Recently, there are several consensus protocol research works that are closely related to TomoChain such as EOS and Ouroboros of Cardano . The mechanism of voting for masternodes for reaching consensus is utilized by Bitshares and EOS , whose consensus protocol is termed Delegated Proof-of-Stake (DPoS). DPoS is similar to the Proof-of-Stake Voting consensus of TomoChain in the sense that masternodes (block creators or witnesses in DPoS) are elected through a voting system. However, TomoChain requires that masternodes need to deposit a required minimum amount of TOMO to become a masternode candidate, which puts more pressure on the masternodes to work honestly. Furthermore, the Double Validation mechanism of TomoChain lowers the probability of handshaking attacks and having invalid blocks, as previously analyzed. EOS also has a maximum of 21 block producers for each epoch, which is less decentralized than TomoChain with a maximum of 150 masternodes elected (and this number of masternodes can be changed following the decentralized governance through voting). The research-backed Cardano blockchain solution, namely Ouroboros, with the ADA coin, which is purely based on Proof-of-Stake, promisingly claims to provide rigorous security guarantees. Similarly to TomoChain , Ouroboros has a set of block producers for each epoch for creating blocks and each block producer candidate needs to deposit a minimum amount of stake (an amount of ADA). However, note that, Ouroboros only provides Single Validation , while Double Validation of TomoChain provides several advantages over Single Validation, as previously analyzed. In Ouroboros, the order of block producers, selected among stakers, is based on a biased randomization while the TomoChain \u2019s randomization for block verifiers is potentially uniform and based on smart contracts. Furthermore, the use of voting as in TomoChain and DPoS enables a more incentive equality between stakers: In Ouroboros, stakers with very little stake have a very small probability of becoming block creators, while, in TomoChain , these stakers can choose an optimal strategy to vote for potential masternodes to get incentives.","title":"Related work"},{"location":"wp-and-research/technical-whitepaper/#Sec:Conclusion","text":"In this paper, we proposed PoSV, a PoS Voting-based blockchain protocol with heuristic and fair voting mechanism, rigorous security guarantees, and fast finality. We also presented a novel reward mechanism and show that, with this mechanism, the blockchain has a low probability of having forks, fast confirmation time, plus the contributions and benefits of masternodes are fair in the sense that the probability distribution function is uniform eventually.","title":"Conclusion and perspectives"},{"location":"wp-and-research/technical-whitepaper/#perspectives","text":"Future work The TomoChain team is currently working on the implementation of the Proof-of-Stake Voting, which will be released on schedule as stated in our roadmap. Furthermore, in parallel with our novel consensus protocol, we will investigate the Sharding mechanism in order to provide even better transaction processing performance. We believe that, the Sharding technique with the stable number of masternodes will provide better stability and efficiency to the blockchain. At the same time, we commit to keep EVM-compatible smart contracts within our masternode sharding framework. Economic sustainability is also an important concept for a blockchain based decentralized network. That means to maintain the network in a sustainable condition, an equilibrium needs to be achieved, in which the cost of running the network infrastructure could be offset by the revenues generated. In this context, the cost of network infrastructure consists of two parts: the physical cost of having hardware such as servers, memories that passes the network technical requirements; and the capital cost of having TOMO locked into smart-contracts. The revenues for Masternodes would primarily come from Reward Engine emission, and later on from service revenues such as token exchange fees provided by applications running on top of TomoChain. We will publish a TomoChain economic analysis and proposal, separate from this technical paper in a later date.","title":"Perspectives"},{"location":"wp-and-research/technical-whitepaper/#Sec:References","text":"Satoshi Nakamoto. Bitcoin: A peer-to-peer electronics cash system. 2008. pdf Ethereum Foundation. Ethereum\u2019s White Paper. , 2014. Online available 25/05/2018. link . D. Larimer. Delegated Proof-of-Stake (DPOS). BitShare White Paper 2014. link . S. King and S. Nadal. PPCoin: Peer-to-peer crypto-currency with proof-of-stake. Self-Published, 2012. pdf V. Buterin. On public and private blockchains. Ethereum Blog, 2015. link . A. Kiayias, A. Russell, B. David, and R. Oliynykov: Ouroboros: A Provably Secure Proof-of-Stake Blockchain Protocol. IACR-CRYPTO-2017. pdf D. Mingxiao, et al. A Review on Consensus Algorithms of Blockchain. 2017 IEEE International Conference on Systems, Man, and Cybernetics (SMC) Banff Center, Banff, Canada, October 5-8, 2017 link R. Pass and E. Shi. Rethinking Large-Scale Consensus. In the Proceedings of the IEEE 30th Computer Security Foundations Symposium, 2017. Thunder Token Foundation: Thunder Consensus White Paper, Janurary, 2018 pdf . R. Pass, L. Seeman, and A. Shelat. Analysis of the Blockchain Protocol in Asynchronous Networks. In EUROCRYPTO 2017 pdf . Juan A. Garay, A. Kiayias, and N. Leonardos. The bitcoin backbone protocol: Analysis and applications. In Elisabeth Oswald and Marc Fischlin, editors, Advances in Cryptology - EUROCRYPT 2015, Volume 9057 of Lecture Notes in Computer Science, pages 281\u2013310. Springer, 2015 pdf . Tendermint Team. Understanding the Basics of a Proof-of-Stake Security Model. link . V. Buterin. On Settlement Finality. link . EOS Team. EOS.IO Technical White Paper v2. https://github.com/EOSIO/Documentation/blob/master/TechnicalWhitePaper.md . Online available 25/05/2018. link Bitshares Team. Delegated Proof-of-Stake Consensus. https://bitshares.org/technology/delegated-proof-of-stake-consensus/. Online available 25/05/2018. link R. Pass, and E. Shi. (2017). Hybrid consensus: Efficient consensus in the permissionless model. In LIPIcs-Leibniz International Proceedings in Informatics (Vol. 91). Schloss Dagstuhl-Leibniz-Zentrum fuer Informatik pdf . V. Buterin, and V. Griffith. (2017). Casper the Friendly Finality Gadget. arXiv preprint arXiv:1710.09437. link H. McCook. Under the Microscope: Economic and Environmental Costs of Bitcoin Mining. link","title":"References"}]}